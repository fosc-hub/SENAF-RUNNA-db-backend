
CREATE TABLE T_BARRIOS
(
	ID_BARRIO            INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	ID_LOCALIDAD         INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKBARRIOS ON T_BARRIOS
(ID_BARRIO   ASC,ID_LOCALIDAD   ASC);

ALTER TABLE T_BARRIOS
	ADD CONSTRAINT  IDX_XPKBARRIOS PRIMARY KEY (ID_BARRIO,ID_LOCALIDAD);

CREATE INDEX IDX_XIF1BARRIOS ON T_BARRIOS
(ID_LOCALIDAD   ASC);

CREATE TABLE T_CATEGORIAS_MOTIVO
(
	ID_CATEGORIA_MOTIVO  INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	DESCRIPCION          LONG VARCHAR  NULL ,
	PESO                 INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKCATEGORIAS_MOTIVO ON T_CATEGORIAS_MOTIVO
(ID_CATEGORIA_MOTIVO   ASC);

ALTER TABLE T_CATEGORIAS_MOTIVO
	ADD CONSTRAINT  IDX_XPKCATEGORIAS_MOTIVO PRIMARY KEY (ID_CATEGORIA_MOTIVO);

CREATE TABLE T_CATEGORIAS_SUBMOTIVO
(
	ID_CATEGORIA_MOTIVO  INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	DESCRIPCION          LONG VARCHAR  NULL ,
	PESO                 INTEGER  NOT NULL ,
	ID_CATEGORIA_SUBMOTIVO INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKCATEGORIAS_SUBMOTIVO ON T_CATEGORIAS_SUBMOTIVO
(ID_CATEGORIA_MOTIVO   ASC,ID_CATEGORIA_SUBMOTIVO   ASC);

ALTER TABLE T_CATEGORIAS_SUBMOTIVO
	ADD CONSTRAINT  IDX_XPKCATEGORIAS_SUBMOTIVO PRIMARY KEY (ID_CATEGORIA_MOTIVO,ID_CATEGORIA_SUBMOTIVO);

CREATE INDEX IDX_XIF1CATEGORIAS_SUBMOTIVO ON T_CATEGORIAS_SUBMOTIVO
(ID_CATEGORIA_MOTIVO   ASC);

CREATE TABLE T_CONDICIONES_VULNERABILIDAD
(
	ID_CONDICION_VULNERABILIDAD INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	PESO                 INTEGER  NOT NULL ,
	DESCRIPCION          VARCHAR2(20)  NOT NULL ,
	NNYA                 SMALLINT  NULL ,
	ADULTO               SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKCONDICIONES_VULNERABILIDAD ON T_CONDICIONES_VULNERABILIDAD
(ID_CONDICION_VULNERABILIDAD   ASC);

ALTER TABLE T_CONDICIONES_VULNERABILIDAD
	ADD CONSTRAINT  IDX_XPKCONDICIONES_VULNERABILIDAD PRIMARY KEY (ID_CONDICION_VULNERABILIDAD);

CREATE TABLE T_CPC
(
	ID_CPC               INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	ID_LOCALIDAD         INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKCPC ON T_CPC
(ID_CPC   ASC,ID_LOCALIDAD   ASC);

ALTER TABLE T_CPC
	ADD CONSTRAINT  IDX_XPKCPC PRIMARY KEY (ID_CPC,ID_LOCALIDAD);

CREATE INDEX IDX_XIF1CPC ON T_CPC
(ID_LOCALIDAD   ASC);

CREATE TABLE T_DEMANDAS
(
	ID_DEMANDA           NUMBER  NOT NULL ,
	ID_LOCALIZACION      INTEGER  NULL ,
	ID_ORIGEN_DEMANDA    INTEGER  NOT NULL ,
	ID_SUBORIGEN_DEMANDA INTEGER  NULL ,
	FECHA_CREACION       DATE  NOT NULL ,
	NRO_NOTIFICACION_102 INTEGER  NULL ,
	NRO_SAC              INTEGER  NULL ,
	NRO_SUAC             INTEGER  NULL ,
	NRO_HISTORIA_CLINICA INTEGER  NULL ,
	NRO_OFICIO_WEB       INTEGER  NULL ,
	DESCRIPCION          LONG VARCHAR  NULL ,
	ULTIMA_ACTUALIZACION DATE  NOT NULL ,
	ESTADO_PROCESO       VARCHAR2(20)  NOT NULL ,
	ID_CATEGORIA_MOTIVO  INTEGER  NULL ,
	ID_CATEGORIA_SUBMOTIVO INTEGER  NULL ,
	FECHA_OFICIO_DOCUMENTO DATE  NOT NULL ,
	FECHA_INGRESO_SENAF  DATE  NOT NULL ,
	AUTOS_CARATULADOS    VARCHAR2(20)  NULL ,
	INSTITUCION          VARCHAR2(20)  NULL ,
	AMBITO_VULNERACION   VARCHAR2(20)  NOT NULL ,
	ESTADO_DEMANDA       VARCHAR2(20)  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDAS ON T_DEMANDAS
(ID_DEMANDA   ASC);

ALTER TABLE T_DEMANDAS
	ADD CONSTRAINT  IDX_XPKDEMANDAS PRIMARY KEY (ID_DEMANDA);

CREATE INDEX IDX_XIF4DEMANDAS ON T_DEMANDAS
(ID_ORIGEN_DEMANDA   ASC);

CREATE INDEX IDX_XIF5DEMANDAS ON T_DEMANDAS
(ID_SUBORIGEN_DEMANDA   ASC,ID_ORIGEN_DEMANDA   ASC);

CREATE INDEX IDX_XIF6DEMANDAS ON T_DEMANDAS
(ID_CATEGORIA_MOTIVO   ASC);

CREATE INDEX IDX_XIF7DEMANDAS ON T_DEMANDAS
(ID_CATEGORIA_MOTIVO   ASC,ID_CATEGORIA_SUBMOTIVO   ASC);

CREATE INDEX IDX_XIF1DEMANDAS ON T_DEMANDAS
(ID_LOCALIZACION   ASC);

CREATE TABLE T_DEMANDA_SCORES
(
	ID_DEMANDA_SCORE     NUMBER  NOT NULL ,
	ULTIMA_ACTUALIZACION DATE  NOT NULL ,
	SCORE                FLOAT  NOT NULL ,
	CONDICIONES_VULNERABILIDAD FLOAT  NOT NULL ,
	VULNERACIONES        FLOAT  NOT NULL ,
	MOTIVOS_INTERVENCION FLOAT  NOT NULL ,
	INDICADORES_VALORACION FLOAT  NULL ,
	ID_DEMANDA           NUMBER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDA_SCORES ON T_DEMANDA_SCORES
(ID_DEMANDA_SCORE   ASC,ID_DEMANDA   ASC);

ALTER TABLE T_DEMANDA_SCORES
	ADD CONSTRAINT  IDX_XPKDEMANDA_SCORES PRIMARY KEY (ID_DEMANDA_SCORE,ID_DEMANDA);

CREATE UNIQUE INDEX IDX_XIF1DEMANDA_SCORES ON T_DEMANDA_SCORES
(ID_DEMANDA   ASC);

CREATE TABLE T_EQUIPOS
(
	ID_EQUIPO            INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKEQUIPOS ON T_EQUIPOS
(ID_EQUIPO   ASC);

ALTER TABLE T_EQUIPOS
	ADD CONSTRAINT  IDX_XPKEQUIPOS PRIMARY KEY (ID_EQUIPO);

CREATE TABLE T_PRECALIFICACIONES_DEMANDA
(
	ID_PRECALIFICACION_DEMANDA INTEGER  NOT NULL ,
	DESCRIPCION          LONG VARCHAR  NULL ,
	ESTADO_PRECALIFICACION VARCHAR2(20)  NOT NULL ,
	ULTIMA_ACTUALIZACION DATE  NOT NULL ,
	ID_DEMANDA           NUMBER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKPRECALIFICACIONES_DEMANDA ON T_PRECALIFICACIONES_DEMANDA
(ID_PRECALIFICACION_DEMANDA   ASC,ID_DEMANDA   ASC);

ALTER TABLE T_PRECALIFICACIONES_DEMANDA
	ADD CONSTRAINT  IDX_XPKPRECALIFICACIONES_DEMANDA PRIMARY KEY (ID_PRECALIFICACION_DEMANDA,ID_DEMANDA);

CREATE UNIQUE INDEX IDX_XIF1PRECALIFICACIONES_DEMANDA ON T_PRECALIFICACIONES_DEMANDA
(ID_DEMANDA   ASC);

CREATE TABLE T_LOCALIDADES
(
	ID_LOCALIDAD         INTEGER  NOT NULL ,
	NOMBRES              VARCHAR2(20)  NOT NULL ,
	DEPARTAMENTO         INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKLOCALIDADES ON T_LOCALIDADES
(ID_LOCALIDAD   ASC);

ALTER TABLE T_LOCALIDADES
	ADD CONSTRAINT  IDX_XPKLOCALIDADES PRIMARY KEY (ID_LOCALIDAD);

CREATE TABLE T_LOCALIZACIONES
(
	ID_LOCALIZACION      INTEGER  NOT NULL ,
	CALLE                VARCHAR2(40)  NOT NULL ,
	TIPO_CALLE           VARCHAR2(20)  NOT NULL ,
	PISO_DEPTO           INTEGER  NULL ,
	LOTE                 INTEGER  NULL ,
	MZA                  INTEGER  NULL ,
	CASA_NRO             INTEGER  NULL ,
	REFERENCIA_GEO       LONG VARCHAR()  NOT NULL ,
	ID_BARRIO            INTEGER  NULL ,
	ID_LOCALIDAD         INTEGER  NULL ,
	ID_CPC               INTEGER  NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKLOCALIZACIONES ON T_LOCALIZACIONES
(ID_LOCALIZACION   ASC);

ALTER TABLE T_LOCALIZACIONES
	ADD CONSTRAINT  IDX_XPKLOCALIZACIONES PRIMARY KEY (ID_LOCALIZACION);

CREATE INDEX IDX_XIF1LOCALIZACIONES ON T_LOCALIZACIONES
(ID_BARRIO   ASC,ID_LOCALIDAD   ASC);

CREATE INDEX IDX_XIF2LOCALIZACIONES ON T_LOCALIZACIONES
(ID_LOCALIDAD   ASC);

CREATE INDEX IDX_XIF3LOCALIZACIONES ON T_LOCALIZACIONES
(ID_CPC   ASC,ID_LOCALIDAD   ASC);

CREATE TABLE T_MOTIVOS_INTERVENCION
(
	ID_MOTIVO_INTERVENCION INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	DESCRIPCION          VARCHAR2(20)  NULL ,
	PESO                 INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKMOTIVOS_INTERVENCION ON T_MOTIVOS_INTERVENCION
(ID_MOTIVO_INTERVENCION   ASC);

ALTER TABLE T_MOTIVOS_INTERVENCION
	ADD CONSTRAINT  IDX_XPKMOTIVOS_INTERVENCION PRIMARY KEY (ID_MOTIVO_INTERVENCION);

CREATE TABLE T_DEMANDAS_MOTIVOS_INTERVENCION
(
	SI_NO                SMALLINT  NOT NULL ,
	ID_DEMANDA           NUMBER  NOT NULL ,
	ID_MOTIVO_INTERVENCION INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDAS_MOTIVOS_INTERVENCION ON T_DEMANDAS_MOTIVOS_INTERVENCION
(ID_DEMANDA   ASC,ID_MOTIVO_INTERVENCION   ASC);

ALTER TABLE T_DEMANDAS_MOTIVOS_INTERVENCION
	ADD CONSTRAINT  IDX_XPKDEMANDAS_MOTIVOS_INTERVENCION PRIMARY KEY (ID_DEMANDA,ID_MOTIVO_INTERVENCION);

CREATE INDEX IDX_XIF1DEMANDAS_MOTIVOS_INTERVENCION ON T_DEMANDAS_MOTIVOS_INTERVENCION
(ID_DEMANDA   ASC);

CREATE INDEX IDX_XIF2DEMANDAS_MOTIVOS_INTERVENCION ON T_DEMANDAS_MOTIVOS_INTERVENCION
(ID_MOTIVO_INTERVENCION   ASC);

CREATE TABLE T_ORIGENES_DEMANDA
(
	ID_ORIGEN_DEMANDA    INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKORIGENES_DEMANDA ON T_ORIGENES_DEMANDA
(ID_ORIGEN_DEMANDA   ASC);

ALTER TABLE T_ORIGENES_DEMANDA
	ADD CONSTRAINT  IDX_XPKORIGENES_DEMANDA PRIMARY KEY (ID_ORIGEN_DEMANDA);

CREATE TABLE T_PERSONAS
(
	ID_PERSONA           INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	APELLIDO             VARCHAR2(20)  NOT NULL ,
	FECHA_NACIMIENTO     DATE  NULL ,
	EDAD_APROXIMADA      INTEGER  NULL ,
	DNI                  INTEGER  NULL ,
	SITUACION_DNI        VARCHAR2(20)  NOT NULL ,
	GENERO               VARCHAR2(20)  NOT NULL ,
	OBSERVACIONES        LONG VARCHAR()  NULL ,
	ADULTO               SMALLINT  NOT NULL ,
	NNYA                 SMALLINT  NOT NULL ,
	NOMBRE_AUTOPERCIBIDO VARCHAR2(20)  NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKPERSONAS ON T_PERSONAS
(ID_PERSONA   ASC);

ALTER TABLE T_PERSONAS
	ADD CONSTRAINT  IDX_XPKPERSONAS PRIMARY KEY (ID_PERSONA);

CREATE TABLE T_LOCALIZACIONES_PERSONAS
(
	PRINCIPAL            SMALLINT  NULL ,
	ID_PERSONA           INTEGER  NOT NULL ,
	ID_LOCALIZACION      INTEGER  NOT NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKLOCALIZACIONES_PERSONAS ON T_LOCALIZACIONES_PERSONAS
(ID_PERSONA   ASC,ID_LOCALIZACION   ASC);

ALTER TABLE T_LOCALIZACIONES_PERSONAS
	ADD CONSTRAINT  IDX_XPKLOCALIZACIONES_PERSONAS PRIMARY KEY (ID_PERSONA,ID_LOCALIZACION);

CREATE INDEX IDX_XIF1LOCALIZACIONES_PERSONAS ON T_LOCALIZACIONES_PERSONAS
(ID_PERSONA   ASC);

CREATE INDEX IDX_XIF2LOCALIZACIONES_PERSONAS ON T_LOCALIZACIONES_PERSONAS
(ID_LOCALIZACION   ASC);

CREATE TABLE T_PERSONAS_CONDICIONES_VULNERABILIDAD
(
	SI_NO                SMALLINT  NOT NULL ,
	ID_PERSONA           INTEGER  NOT NULL ,
	ID_DEMANDA           NUMBER  NULL ,
	ID_CONDICION_VULNERABILIDAD INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKPERSONAS_CONDICIONES_VULNERABILIDAD ON T_PERSONAS_CONDICIONES_VULNERABILIDAD
(ID_PERSONA   ASC,ID_CONDICION_VULNERABILIDAD   ASC);

ALTER TABLE T_PERSONAS_CONDICIONES_VULNERABILIDAD
	ADD CONSTRAINT  IDX_XPKPERSONAS_CONDICIONES_VULNERABILIDAD PRIMARY KEY (ID_PERSONA,ID_CONDICION_VULNERABILIDAD);

CREATE INDEX IDX_XIF1PERSONAS_CONDICIONES_VULNERABILIDAD ON T_PERSONAS_CONDICIONES_VULNERABILIDAD
(ID_PERSONA   ASC);

CREATE INDEX IDX_XIF2PERSONAS_CONDICIONES_VULNERABILIDAD ON T_PERSONAS_CONDICIONES_VULNERABILIDAD
(ID_DEMANDA   ASC);

CREATE INDEX IDX_XIF3PERSONAS_CONDICIONES_VULNERABILIDAD ON T_PERSONAS_CONDICIONES_VULNERABILIDAD
(ID_CONDICION_VULNERABILIDAD   ASC);

CREATE TABLE T_DEMANDAS_PERSONAS
(
	CONVIVIENTE          SMALLINT  NULL ,
	SUPUESTO_AUTORDV     VARCHAR2(20)  NOT NULL ,
	SUPUESTO_AUTORDV_PRINCIPAL SMALLINT  NULL ,
	NNYA_PRINCIPAL       SMALLINT  NULL ,
	ID_DEMANDA           NUMBER  NOT NULL ,
	ID_PERSONA           INTEGER  NOT NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDAS_PERSONAS ON T_DEMANDAS_PERSONAS
(ID_DEMANDA   ASC,ID_PERSONA   ASC);

ALTER TABLE T_DEMANDAS_PERSONAS
	ADD CONSTRAINT  IDX_XPKDEMANDAS_PERSONAS PRIMARY KEY (ID_DEMANDA,ID_PERSONA);

CREATE INDEX IDX_XIF1DEMANDAS_PERSONAS ON T_DEMANDAS_PERSONAS
(ID_DEMANDA   ASC);

CREATE INDEX IDX_XIF2DEMANDAS_PERSONAS ON T_DEMANDAS_PERSONAS
(ID_PERSONA   ASC);

CREATE TABLE T_NNYA_SCORES
(
	ID_NNYA_SCORE        INTEGER  NOT NULL ,
	ULTIMA_ACTUALIZACION DATE  NOT NULL ,
	SCORE                FLOAT  NOT NULL ,
	CONDICIONES_VULNERABILIDAD FLOAT  NOT NULL ,
	VULNERACIONES        FLOAT  NOT NULL ,
	NNYA                 INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKNNYA_SCORES ON T_NNYA_SCORES
(ID_NNYA_SCORE   ASC,NNYA   ASC);

ALTER TABLE T_NNYA_SCORES
	ADD CONSTRAINT  IDX_XPKNNYA_SCORES PRIMARY KEY (ID_NNYA_SCORE,NNYA);

CREATE UNIQUE INDEX IDX_XIF1NNYA_SCORES ON T_NNYA_SCORES
(NNYA   ASC);

CREATE TABLE T_SUBORIGENES_DEMANDA
(
	ID_SUBORIGEN_DEMANDA INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL ,
	ID_ORIGEN_DEMANDA    INTEGER  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKSUBORIGENES_DEMANDA ON T_SUBORIGENES_DEMANDA
(ID_SUBORIGEN_DEMANDA   ASC,ID_ORIGEN_DEMANDA   ASC);

ALTER TABLE T_SUBORIGENES_DEMANDA
	ADD CONSTRAINT  IDX_XPKSUBORIGENES_DEMANDA PRIMARY KEY (ID_SUBORIGEN_DEMANDA,ID_ORIGEN_DEMANDA);

CREATE INDEX IDX_XIF1SUBORIGENES_DEMANDA ON T_SUBORIGENES_DEMANDA
(ID_ORIGEN_DEMANDA   ASC);

CREATE TABLE T_TIPOS_VINCULOS_PERSONA
(
	ID_TIPO_VINCULO_PERSONA INTEGER  NOT NULL ,
	NOMBRE               VARCHAR2(20)  NOT NULL 
);

CREATE UNIQUE INDEX IDX_XPKTIPOS_VINCULOS_PERSONA ON T_TIPOS_VINCULOS_PERSONA
(ID_TIPO_VINCULO_PERSONA   ASC);

ALTER TABLE T_TIPOS_VINCULOS_PERSONA
	ADD CONSTRAINT  IDX_XPKTIPOS_VINCULOS_PERSONA PRIMARY KEY (ID_TIPO_VINCULO_PERSONA);

CREATE TABLE T_USERS
(
	ID_USER              INTEGER  NOT NULL ,
	PASSWORD             VARCHAR2(20)  NOT NULL ,
	LAST_LOGIN           DATE  NOT NULL ,
	USERNAME             VARCHAR2(20)  NOT NULL ,
	FIRST_NAME           VARCHAR2(20)  NOT NULL ,
	LAST_NAME            VARCHAR2(20)  NOT NULL ,
	EMAIL                VARCHAR2(20)  NOT NULL ,
	IS_STAFF             SMALLINT  NOT NULL ,
	IS_ACTIVE            SMALLINT  NULL ,
	IS_SUPERUSER         SMALLINT  NULL ,
	DATE_JOINED          DATE  NOT NULL ,
	GENERO               VARCHAR2(20)  NOT NULL ,
	TELEFONO             INTEGER  NOT NULL ,
	ID_LOCALIDAD         INTEGER  NULL ,
	ID_EQUIPO            INTEGER  NULL 
);

CREATE UNIQUE INDEX IDX_XPKUSERS ON T_USERS
(ID_USER   ASC);

ALTER TABLE T_USERS
	ADD CONSTRAINT  IDX_XPKUSERS PRIMARY KEY (ID_USER);

CREATE INDEX IDX_XIF1USERS ON T_USERS
(ID_LOCALIDAD   ASC);

CREATE INDEX IDX_XIF2USERS ON T_USERS
(ID_EQUIPO   ASC);

CREATE TABLE T_DEMANDAS_ASIGNADOS
(
	ID_DEMANDA           NUMBER  NOT NULL ,
	ID_USER              INTEGER  NOT NULL ,
	ESTA_ACTIVO          SMALLINT  NULL ,
	RECIBIDO             SMALLINT  NULL ,
	COMENTARIOS          LONG VARCHAR  NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDAS_ASIGNADOS ON T_DEMANDAS_ASIGNADOS
(ID_DEMANDA   ASC,ID_USER   ASC);

ALTER TABLE T_DEMANDAS_ASIGNADOS
	ADD CONSTRAINT  IDX_XPKDEMANDAS_ASIGNADOS PRIMARY KEY (ID_DEMANDA,ID_USER);

CREATE INDEX IDX_XIF1DEMANDAS_ASIGNADOS ON T_DEMANDAS_ASIGNADOS
(ID_DEMANDA   ASC);

CREATE INDEX IDX_XIF2DEMANDAS_ASIGNADOS ON T_DEMANDAS_ASIGNADOS
(ID_USER   ASC);

CREATE TABLE T_VINCULOS_PERSONA
(
	GARANTIZA_PROTECCION SMALLINT  NULL ,
	CONVIVEN             SMALLINT  NOT NULL ,
	AUTORDV              SMALLINT  NOT NULL ,
	ID_PERSONA_PRINCIPAL INTEGER  NOT NULL ,
	ID_TIPO_VINCULO_PERSONA INTEGER  NOT NULL ,
	ID_PERSONA_SECUNDARIA INTEGER  NOT NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKVINCULOS_PERSONA ON T_VINCULOS_PERSONA
(ID_PERSONA_PRINCIPAL   ASC,ID_TIPO_VINCULO_PERSONA   ASC,ID_PERSONA_SECUNDARIA   ASC);

ALTER TABLE T_VINCULOS_PERSONA
	ADD CONSTRAINT  IDX_XPKVINCULOS_PERSONA PRIMARY KEY (ID_PERSONA_PRINCIPAL,ID_TIPO_VINCULO_PERSONA,ID_PERSONA_SECUNDARIA);

CREATE INDEX IDX_XIF1VINCULOS_PERSONA ON T_VINCULOS_PERSONA
(ID_PERSONA_PRINCIPAL   ASC);

CREATE INDEX IDX_XIF2VINCULOS_PERSONA ON T_VINCULOS_PERSONA
(ID_PERSONA_SECUNDARIA   ASC);

CREATE INDEX IDX_XIF3VINCULOS_PERSONA ON T_VINCULOS_PERSONA
(ID_TIPO_VINCULO_PERSONA   ASC);

CREATE TABLE T_DEMANDAS_VINCULADAS
(
	DEMANDA_PREDECESORA  NUMBER  NOT NULL ,
	DEMANDA_SUCESORA     NUMBER  NOT NULL ,
	DELETED              SMALLINT  NULL 
);

CREATE UNIQUE INDEX IDX_XPKDEMANDAS_VINCULADAS ON T_DEMANDAS_VINCULADAS
(DEMANDA_PREDECESORA   ASC,DEMANDA_SUCESORA   ASC);

ALTER TABLE T_DEMANDAS_VINCULADAS
	ADD CONSTRAINT  IDX_XPKDEMANDAS_VINCULADAS PRIMARY KEY (DEMANDA_PREDECESORA,DEMANDA_SUCESORA);

CREATE INDEX IDX_XIF1DEMANDAS_VINCULADAS ON T_DEMANDAS_VINCULADAS
(DEMANDA_PREDECESORA   ASC);

CREATE INDEX IDX_XIF2DEMANDAS_VINCULADAS ON T_DEMANDAS_VINCULADAS
(DEMANDA_SUCESORA   ASC);

ALTER TABLE T_BARRIOS
	ADD (
CONSTRAINT R_34 FOREIGN KEY (ID_LOCALIDAD) REFERENCES T_LOCALIDADES (ID_LOCALIDAD) ON DELETE CASCADE);

ALTER TABLE T_CATEGORIAS_SUBMOTIVO
	ADD (
CONSTRAINT R_42 FOREIGN KEY (ID_CATEGORIA_MOTIVO) REFERENCES T_CATEGORIAS_MOTIVO (ID_CATEGORIA_MOTIVO) ON DELETE CASCADE);

ALTER TABLE T_CPC
	ADD (
CONSTRAINT R_35 FOREIGN KEY (ID_LOCALIDAD) REFERENCES T_LOCALIDADES (ID_LOCALIDAD) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS
	ADD (
CONSTRAINT R_6 FOREIGN KEY (ID_ORIGEN_DEMANDA) REFERENCES T_ORIGENES_DEMANDA (ID_ORIGEN_DEMANDA));

ALTER TABLE T_DEMANDAS
	ADD (
CONSTRAINT R_7 FOREIGN KEY (ID_SUBORIGEN_DEMANDA, ID_ORIGEN_DEMANDA) REFERENCES T_SUBORIGENES_DEMANDA (ID_SUBORIGEN_DEMANDA, ID_ORIGEN_DEMANDA));

ALTER TABLE T_DEMANDAS
	ADD (
CONSTRAINT R_40 FOREIGN KEY (ID_CATEGORIA_MOTIVO) REFERENCES T_CATEGORIAS_MOTIVO (ID_CATEGORIA_MOTIVO) ON DELETE SET NULL);

ALTER TABLE T_DEMANDAS
	ADD (
CONSTRAINT R_41 FOREIGN KEY (ID_CATEGORIA_MOTIVO, ID_CATEGORIA_SUBMOTIVO) REFERENCES T_CATEGORIAS_SUBMOTIVO (ID_CATEGORIA_MOTIVO, ID_CATEGORIA_SUBMOTIVO) ON DELETE SET NULL);

ALTER TABLE T_DEMANDAS
	ADD (
CONSTRAINT R_3 FOREIGN KEY (ID_LOCALIZACION) REFERENCES T_LOCALIZACIONES (ID_LOCALIZACION));

ALTER TABLE T_DEMANDA_SCORES
	ADD (
CONSTRAINT R_1 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_PRECALIFICACIONES_DEMANDA
	ADD (
CONSTRAINT R_17 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_LOCALIZACIONES
	ADD (
CONSTRAINT R_19 FOREIGN KEY (ID_BARRIO, ID_LOCALIDAD) REFERENCES T_BARRIOS (ID_BARRIO, ID_LOCALIDAD) ON DELETE SET NULL);

ALTER TABLE T_LOCALIZACIONES
	ADD (
CONSTRAINT R_20 FOREIGN KEY (ID_LOCALIDAD) REFERENCES T_LOCALIDADES (ID_LOCALIDAD) ON DELETE CASCADE);

ALTER TABLE T_LOCALIZACIONES
	ADD (
CONSTRAINT R_21 FOREIGN KEY (ID_CPC, ID_LOCALIDAD) REFERENCES T_CPC (ID_CPC, ID_LOCALIDAD) ON DELETE SET NULL);

ALTER TABLE T_DEMANDAS_MOTIVOS_INTERVENCION
	ADD (
CONSTRAINT R_25 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS_MOTIVOS_INTERVENCION
	ADD (
CONSTRAINT R_26 FOREIGN KEY (ID_MOTIVO_INTERVENCION) REFERENCES T_MOTIVOS_INTERVENCION (ID_MOTIVO_INTERVENCION) ON DELETE CASCADE);

ALTER TABLE T_LOCALIZACIONES_PERSONAS
	ADD (
CONSTRAINT R_13 FOREIGN KEY (ID_PERSONA) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_LOCALIZACIONES_PERSONAS
	ADD (
CONSTRAINT R_14 FOREIGN KEY (ID_LOCALIZACION) REFERENCES T_LOCALIZACIONES (ID_LOCALIZACION) ON DELETE CASCADE);

ALTER TABLE T_PERSONAS_CONDICIONES_VULNERABILIDAD
	ADD (
CONSTRAINT R_22 FOREIGN KEY (ID_PERSONA) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_PERSONAS_CONDICIONES_VULNERABILIDAD
	ADD (
CONSTRAINT R_24 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE SET NULL);

ALTER TABLE T_PERSONAS_CONDICIONES_VULNERABILIDAD
	ADD (
CONSTRAINT R_23 FOREIGN KEY (ID_CONDICION_VULNERABILIDAD) REFERENCES T_CONDICIONES_VULNERABILIDAD (ID_CONDICION_VULNERABILIDAD) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS_PERSONAS
	ADD (
CONSTRAINT R_27 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS_PERSONAS
	ADD (
CONSTRAINT R_28 FOREIGN KEY (ID_PERSONA) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_NNYA_SCORES
	ADD (
CONSTRAINT R_36 FOREIGN KEY (NNYA) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_SUBORIGENES_DEMANDA
	ADD (
CONSTRAINT R_2 FOREIGN KEY (ID_ORIGEN_DEMANDA) REFERENCES T_ORIGENES_DEMANDA (ID_ORIGEN_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_USERS
	ADD (
CONSTRAINT R_33 FOREIGN KEY (ID_LOCALIDAD) REFERENCES T_LOCALIDADES (ID_LOCALIDAD) ON DELETE SET NULL);

ALTER TABLE T_USERS
	ADD (
CONSTRAINT R_39 FOREIGN KEY (ID_EQUIPO) REFERENCES T_EQUIPOS (ID_EQUIPO) ON DELETE SET NULL);

ALTER TABLE T_DEMANDAS_ASIGNADOS
	ADD (
CONSTRAINT R_15 FOREIGN KEY (ID_DEMANDA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS_ASIGNADOS
	ADD (
CONSTRAINT R_16 FOREIGN KEY (ID_USER) REFERENCES T_USERS (ID_USER) ON DELETE CASCADE);

ALTER TABLE T_VINCULOS_PERSONA
	ADD (
CONSTRAINT R_29 FOREIGN KEY (ID_PERSONA_PRINCIPAL) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_VINCULOS_PERSONA
	ADD (
CONSTRAINT R_30 FOREIGN KEY (ID_PERSONA_SECUNDARIA) REFERENCES T_PERSONAS (ID_PERSONA) ON DELETE CASCADE);

ALTER TABLE T_VINCULOS_PERSONA
	ADD (
CONSTRAINT R_31 FOREIGN KEY (ID_TIPO_VINCULO_PERSONA) REFERENCES T_TIPOS_VINCULOS_PERSONA (ID_TIPO_VINCULO_PERSONA) ON DELETE SET NULL);

ALTER TABLE T_DEMANDAS_VINCULADAS
	ADD (
CONSTRAINT R_37 FOREIGN KEY (DEMANDA_PREDECESORA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

ALTER TABLE T_DEMANDAS_VINCULADAS
	ADD (
CONSTRAINT R_38 FOREIGN KEY (DEMANDA_SUCESORA) REFERENCES T_DEMANDAS (ID_DEMANDA) ON DELETE CASCADE);

CREATE  TRIGGER  tD_T_BARRIOS AFTER DELETE ON T_BARRIOS for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_BARRIOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_BARRIOS  T_LOCALIZACIONES on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000ff07", PARENT_OWNER="", PARENT_TABLE="T_BARRIOS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="ID_BARRIO""ID_LOCALIDAD" */
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_BARRIO = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_LOCALIZACIONES,:%Old," = "," AND") */
        T_LOCALIZACIONES.ID_BARRIO = :old.ID_BARRIO AND
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_BARRIOS BEFORE INSERT ON T_BARRIOS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_BARRIOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_BARRIOS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000f946", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_BARRIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="ID_LOCALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIDADES
      WHERE
        /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
        :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_BARRIOS because T_LOCALIDADES does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_BARRIOS AFTER UPDATE ON T_BARRIOS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_BARRIOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* T_BARRIOS  T_LOCALIZACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="000252bf", PARENT_OWNER="", PARENT_TABLE="T_BARRIOS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="ID_BARRIO""ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_BARRIO <> :new.ID_BARRIO OR 
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_BARRIO = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_LOCALIZACIONES,:%Old," = ",",") */
        T_LOCALIZACIONES.ID_BARRIO = :old.ID_BARRIO AND
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_BARRIOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_BARRIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIDADES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
      :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_BARRIOS because T_LOCALIDADES does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_CATEGORIAS_MOTIVO AFTER DELETE ON T_CATEGORIAS_MOTIVO for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_CATEGORIAS_MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_MOTIVO  T_CATEGORIAS_SUBMOTIVO on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0001bd6a", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_CATEGORIAS_SUBMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_42", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
    DELETE FROM T_CATEGORIAS_SUBMOTIVO
      WHERE
        /*  %JoinFKPK(T_CATEGORIAS_SUBMOTIVO,:%Old," = "," AND") */
        T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO;

    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_MOTIVO  T_DEMANDAS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL
      WHERE
        /* %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_CATEGORIAS_MOTIVO AFTER UPDATE ON T_CATEGORIAS_MOTIVO for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_CATEGORIAS_MOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_CATEGORIAS_MOTIVO  T_CATEGORIAS_SUBMOTIVO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024bde", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_CATEGORIAS_SUBMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_42", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_CATEGORIA_MOTIVO <> :new.ID_CATEGORIA_MOTIVO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_CATEGORIAS_SUBMOTIVO
      WHERE
        /*  %JoinFKPK(T_CATEGORIAS_SUBMOTIVO,:%Old," = "," AND") */
        T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_CATEGORIAS_MOTIVO because T_CATEGORIAS_SUBMOTIVO exists.'
      );
    END IF;
  END IF;

  /* T_CATEGORIAS_MOTIVO  T_DEMANDAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_CATEGORIA_MOTIVO <> :new.ID_CATEGORIA_MOTIVO
  THEN
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL
      WHERE
        /* %JoinFKPK(T_DEMANDAS,:%Old," = ",",") */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_CATEGORIAS_SUBMOTIVO AFTER DELETE ON T_CATEGORIAS_SUBMOTIVO for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_CATEGORIAS_SUBMOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_SUBMOTIVO  T_DEMANDAS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="000115ed", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_SUBMOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="ID_CATEGORIA_MOTIVO""ID_CATEGORIA_SUBMOTIVO" */
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL,
        T_DEMANDAS.ID_CATEGORIA_SUBMOTIVO = NULL
      WHERE
        /* %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO AND
        T_DEMANDAS.ID_CATEGORIA_SUBMOTIVO = :old.ID_CATEGORIA_SUBMOTIVO;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_CATEGORIAS_SUBMOTIVO BEFORE INSERT ON T_CATEGORIAS_SUBMOTIVO for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_CATEGORIAS_SUBMOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_MOTIVO  T_CATEGORIAS_SUBMOTIVO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000112d8", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_CATEGORIAS_SUBMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_42", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
    SELECT count(*) INTO NUMROWS
      FROM T_CATEGORIAS_MOTIVO
      WHERE
        /* %JoinFKPK(:%New,T_CATEGORIAS_MOTIVO," = "," AND") */
        :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_MOTIVO.ID_CATEGORIA_MOTIVO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_CATEGORIAS_SUBMOTIVO because T_CATEGORIAS_MOTIVO does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_CATEGORIAS_SUBMOTIVO AFTER UPDATE ON T_CATEGORIAS_SUBMOTIVO for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_CATEGORIAS_SUBMOTIVO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* T_CATEGORIAS_SUBMOTIVO  T_DEMANDAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0002a644", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_SUBMOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="ID_CATEGORIA_MOTIVO""ID_CATEGORIA_SUBMOTIVO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_CATEGORIA_MOTIVO <> :new.ID_CATEGORIA_MOTIVO OR 
    :old.ID_CATEGORIA_SUBMOTIVO <> :new.ID_CATEGORIA_SUBMOTIVO
  THEN
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL,
        T_DEMANDAS.ID_CATEGORIA_SUBMOTIVO = NULL
      WHERE
        /* %JoinFKPK(T_DEMANDAS,:%Old," = ",",") */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = :old.ID_CATEGORIA_MOTIVO AND
        T_DEMANDAS.ID_CATEGORIA_SUBMOTIVO = :old.ID_CATEGORIA_SUBMOTIVO;
  END IF;

  /* erwin Builtin Trigger */
  /* T_CATEGORIAS_MOTIVO  T_CATEGORIAS_SUBMOTIVO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_CATEGORIAS_SUBMOTIVO"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_42", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
  SELECT count(*) INTO NUMROWS
    FROM T_CATEGORIAS_MOTIVO
    WHERE
      /* %JoinFKPK(:%New,T_CATEGORIAS_MOTIVO," = "," AND") */
      :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_MOTIVO.ID_CATEGORIA_MOTIVO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_CATEGORIAS_SUBMOTIVO because T_CATEGORIAS_MOTIVO does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_CONDICIONES_VULNERABILIDA AFTER DELETE ON T_CONDICIONES_VULNERABILIDAD for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_CONDICIONES_VULNERABILIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CONDICIONES_VULNERABILIDAD  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0000fd35", PARENT_OWNER="", PARENT_TABLE="T_CONDICIONES_VULNERABILIDAD"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ID_CONDICION_VULNERABILIDAD" */
    DELETE FROM T_PERSONAS_CONDICIONES_VULNERABILIDAD
      WHERE
        /*  %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = "," AND") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_CONDICION_VULNERABILIDAD = :old.ID_CONDICION_VULNERABILIDAD;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_CONDICIONES_VULNERABILIDA AFTER UPDATE ON T_CONDICIONES_VULNERABILIDAD for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_CONDICIONES_VULNERABILIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_CONDICIONES_VULNERABILIDAD  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00018ac0", PARENT_OWNER="", PARENT_TABLE="T_CONDICIONES_VULNERABILIDAD"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ID_CONDICION_VULNERABILIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_CONDICION_VULNERABILIDAD <> :new.ID_CONDICION_VULNERABILIDAD
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS_CONDICIONES_VULNERABILIDAD
      WHERE
        /*  %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = "," AND") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_CONDICION_VULNERABILIDAD = :old.ID_CONDICION_VULNERABILIDAD;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_CONDICIONES_VULNERABILIDAD because T_PERSONAS_CONDICIONES_VULNERABILIDAD exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_CPC AFTER DELETE ON T_CPC for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_CPC 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CPC  T_LOCALIZACIONES on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000f655", PARENT_OWNER="", PARENT_TABLE="T_CPC"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="ID_CPC""ID_LOCALIDAD" */
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_CPC = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_LOCALIZACIONES,:%Old," = "," AND") */
        T_LOCALIZACIONES.ID_CPC = :old.ID_CPC AND
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_CPC BEFORE INSERT ON T_CPC for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_CPC 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_CPC on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000ff51", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_CPC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ID_LOCALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIDADES
      WHERE
        /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
        :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_CPC because T_LOCALIDADES does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_CPC AFTER UPDATE ON T_CPC for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_CPC 
DECLARE NUMROWS INTEGER;
BEGIN
  /* T_CPC  T_LOCALIZACIONES on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00024b08", PARENT_OWNER="", PARENT_TABLE="T_CPC"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="ID_CPC""ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_CPC <> :new.ID_CPC OR 
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_CPC = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_LOCALIZACIONES,:%Old," = ",",") */
        T_LOCALIZACIONES.ID_CPC = :old.ID_CPC AND
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_CPC on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_CPC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIDADES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
      :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_CPC because T_LOCALIDADES does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_DEMANDAS AFTER DELETE ON T_DEMANDAS for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_DEMANDAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="000717ee", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_38", FK_COLUMNS="DEMANDA_SUCESORA" */
    DELETE FROM T_DEMANDAS_VINCULADAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_VINCULADAS,:%Old," = "," AND") */
        T_DEMANDAS_VINCULADAS.DEMANDA_SUCESORA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="DEMANDA_PREDECESORA" */
    DELETE FROM T_DEMANDAS_VINCULADAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_VINCULADAS,:%Old," = "," AND") */
        T_DEMANDAS_VINCULADAS.DEMANDA_PREDECESORA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_PERSONAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="ID_DEMANDA" */
    DELETE FROM T_DEMANDAS_PERSONAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_PERSONAS,:%Old," = "," AND") */
        T_DEMANDAS_PERSONAS.ID_DEMANDA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_MOTIVOS_INTERVENCION on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_25", FK_COLUMNS="ID_DEMANDA" */
    DELETE FROM T_DEMANDAS_MOTIVOS_INTERVENCION
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_MOTIVOS_INTERVENCION,:%Old," = "," AND") */
        T_DEMANDAS_MOTIVOS_INTERVENCION.ID_DEMANDA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ID_DEMANDA" */
    UPDATE T_PERSONAS_CONDICIONES_VULNERABILIDAD
      SET
        /* %SetFK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,NULL) */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_DEMANDA = NULL
      WHERE
        /* %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = "," AND") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_DEMANDA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_PRECALIFICACIONES_DEMANDA on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PRECALIFICACIONES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="ID_DEMANDA" */
    DELETE FROM T_PRECALIFICACIONES_DEMANDA
      WHERE
        /*  %JoinFKPK(T_PRECALIFICACIONES_DEMANDA,:%Old," = "," AND") */
        T_PRECALIFICACIONES_DEMANDA.ID_DEMANDA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_ASIGNADOS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ID_DEMANDA" */
    DELETE FROM T_DEMANDAS_ASIGNADOS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_ASIGNADOS,:%Old," = "," AND") */
        T_DEMANDAS_ASIGNADOS.ID_DEMANDA = :old.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDA_SCORES on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="ID_DEMANDA" */
    DELETE FROM T_DEMANDA_SCORES
      WHERE
        /*  %JoinFKPK(T_DEMANDA_SCORES,:%Old," = "," AND") */
        T_DEMANDA_SCORES.ID_DEMANDA = :old.ID_DEMANDA;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_DEMANDAS BEFORE INSERT ON T_DEMANDAS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_SUBMOTIVO  T_DEMANDAS on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0006629b", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_SUBMOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="ID_CATEGORIA_MOTIVO""ID_CATEGORIA_SUBMOTIVO" */
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL,
        T_DEMANDAS.ID_CATEGORIA_SUBMOTIVO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_CATEGORIAS_SUBMOTIVO
            WHERE
              /* %JoinFKPK(:%New,T_CATEGORIAS_SUBMOTIVO," = "," AND") */
              :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_MOTIVO AND
              :new.ID_CATEGORIA_SUBMOTIVO = T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_SUBMOTIVO
        ) 
        /* %JoinPKPK(T_DEMANDAS,:%New," = "," AND") */
         and T_DEMANDAS.ID_DEMANDA = :new.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_CATEGORIAS_MOTIVO  T_DEMANDAS on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_CATEGORIA_MOTIVO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_CATEGORIAS_MOTIVO
            WHERE
              /* %JoinFKPK(:%New,T_CATEGORIAS_MOTIVO," = "," AND") */
              :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_MOTIVO.ID_CATEGORIA_MOTIVO
        ) 
        /* %JoinPKPK(T_DEMANDAS,:%New," = "," AND") */
         and T_DEMANDAS.ID_DEMANDA = :new.ID_DEMANDA;

    /* erwin Builtin Trigger */
    /* T_SUBORIGENES_DEMANDA  T_DEMANDAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_SUBORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="ID_SUBORIGEN_DEMANDA""ID_ORIGEN_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_SUBORIGENES_DEMANDA
      WHERE
        /* %JoinFKPK(:%New,T_SUBORIGENES_DEMANDA," = "," AND") */
        :new.ID_SUBORIGEN_DEMANDA = T_SUBORIGENES_DEMANDA.ID_SUBORIGEN_DEMANDA AND
        :new.ID_ORIGEN_DEMANDA = T_SUBORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS because T_SUBORIGENES_DEMANDA does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_ORIGENES_DEMANDA  T_DEMANDAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_ORIGENES_DEMANDA
      WHERE
        /* %JoinFKPK(:%New,T_ORIGENES_DEMANDA," = "," AND") */
        :new.ID_ORIGEN_DEMANDA = T_ORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS because T_ORIGENES_DEMANDA does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_LOCALIZACIONES  T_DEMANDAS on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="ID_LOCALIZACION" */
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_LOCALIZACION = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_LOCALIZACIONES
            WHERE
              /* %JoinFKPK(:%New,T_LOCALIZACIONES," = "," AND") */
              :new.ID_LOCALIZACION = T_LOCALIZACIONES.ID_LOCALIZACION
        ) 
        /* %JoinPKPK(T_DEMANDAS,:%New," = "," AND") */
         and T_DEMANDAS.ID_DEMANDA = :new.ID_DEMANDA;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDAS AFTER UPDATE ON T_DEMANDAS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00107ab9", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_38", FK_COLUMNS="DEMANDA_SUCESORA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_VINCULADAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_VINCULADAS,:%Old," = "," AND") */
        T_DEMANDAS_VINCULADAS.DEMANDA_SUCESORA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDAS_VINCULADAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="DEMANDA_PREDECESORA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_VINCULADAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_VINCULADAS,:%Old," = "," AND") */
        T_DEMANDAS_VINCULADAS.DEMANDA_PREDECESORA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDAS_VINCULADAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_PERSONAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_PERSONAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_PERSONAS,:%Old," = "," AND") */
        T_DEMANDAS_PERSONAS.ID_DEMANDA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDAS_PERSONAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_MOTIVOS_INTERVENCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_25", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_MOTIVOS_INTERVENCION
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_MOTIVOS_INTERVENCION,:%Old," = "," AND") */
        T_DEMANDAS_MOTIVOS_INTERVENCION.ID_DEMANDA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDAS_MOTIVOS_INTERVENCION exists.'
      );
    END IF;
  END IF;

  /* T_DEMANDAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    UPDATE T_PERSONAS_CONDICIONES_VULNERABILIDAD
      SET
        /* %SetFK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,NULL) */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_DEMANDA = NULL
      WHERE
        /* %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = ",",") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_DEMANDA = :old.ID_DEMANDA;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_PRECALIFICACIONES_DEMANDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PRECALIFICACIONES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_PRECALIFICACIONES_DEMANDA
      WHERE
        /*  %JoinFKPK(T_PRECALIFICACIONES_DEMANDA,:%Old," = "," AND") */
        T_PRECALIFICACIONES_DEMANDA.ID_DEMANDA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_PRECALIFICACIONES_DEMANDA exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_ASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_ASIGNADOS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_ASIGNADOS,:%Old," = "," AND") */
        T_DEMANDAS_ASIGNADOS.ID_DEMANDA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDAS_ASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDA_SCORES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="ID_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_DEMANDA <> :new.ID_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDA_SCORES
      WHERE
        /*  %JoinFKPK(T_DEMANDA_SCORES,:%Old," = "," AND") */
        T_DEMANDA_SCORES.ID_DEMANDA = :old.ID_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_DEMANDAS because T_DEMANDA_SCORES exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_CATEGORIAS_SUBMOTIVO  T_DEMANDAS on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_SUBMOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_41", FK_COLUMNS="ID_CATEGORIA_MOTIVO""ID_CATEGORIA_SUBMOTIVO" */
  SELECT count(*) INTO NUMROWS
    FROM T_CATEGORIAS_SUBMOTIVO
    WHERE
      /* %JoinFKPK(:%New,T_CATEGORIAS_SUBMOTIVO," = "," AND") */
      :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_MOTIVO AND
      :new.ID_CATEGORIA_SUBMOTIVO = T_CATEGORIAS_SUBMOTIVO.ID_CATEGORIA_SUBMOTIVO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_CATEGORIA_MOTIVO IS NOT NULL AND
    :new.ID_CATEGORIA_SUBMOTIVO IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS because T_CATEGORIAS_SUBMOTIVO does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_CATEGORIAS_MOTIVO  T_DEMANDAS on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CATEGORIAS_MOTIVO"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="ID_CATEGORIA_MOTIVO" */
  SELECT count(*) INTO NUMROWS
    FROM T_CATEGORIAS_MOTIVO
    WHERE
      /* %JoinFKPK(:%New,T_CATEGORIAS_MOTIVO," = "," AND") */
      :new.ID_CATEGORIA_MOTIVO = T_CATEGORIAS_MOTIVO.ID_CATEGORIA_MOTIVO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_CATEGORIA_MOTIVO IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS because T_CATEGORIAS_MOTIVO does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_SUBORIGENES_DEMANDA  T_DEMANDAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_SUBORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="ID_SUBORIGEN_DEMANDA""ID_ORIGEN_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_SUBORIGENES_DEMANDA
    WHERE
      /* %JoinFKPK(:%New,T_SUBORIGENES_DEMANDA," = "," AND") */
      :new.ID_SUBORIGEN_DEMANDA = T_SUBORIGENES_DEMANDA.ID_SUBORIGEN_DEMANDA AND
      :new.ID_ORIGEN_DEMANDA = T_SUBORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS because T_SUBORIGENES_DEMANDA does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_ORIGENES_DEMANDA  T_DEMANDAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_ORIGENES_DEMANDA
    WHERE
      /* %JoinFKPK(:%New,T_ORIGENES_DEMANDA," = "," AND") */
      :new.ID_ORIGEN_DEMANDA = T_ORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS because T_ORIGENES_DEMANDA does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIZACIONES  T_DEMANDAS on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="ID_LOCALIZACION" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIZACIONES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIZACIONES," = "," AND") */
      :new.ID_LOCALIZACION = T_LOCALIZACIONES.ID_LOCALIZACION;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_LOCALIZACION IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS because T_LOCALIZACIONES does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_DEMANDA_SCORES BEFORE INSERT ON T_DEMANDA_SCORES for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDA_SCORES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDA_SCORES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000fb8b", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="ID_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDA_SCORES because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDA_SCORES AFTER UPDATE ON T_DEMANDA_SCORES for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDA_SCORES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDA_SCORES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000fa89", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_1", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDA_SCORES because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_EQUIPOS AFTER DELETE ON T_EQUIPOS for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_EQUIPOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_EQUIPOS  T_USERS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000ad35", PARENT_OWNER="", PARENT_TABLE="T_EQUIPOS"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ID_EQUIPO" */
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_EQUIPO = NULL
      WHERE
        /* %JoinFKPK(T_USERS,:%Old," = "," AND") */
        T_USERS.ID_EQUIPO = :old.ID_EQUIPO;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_EQUIPOS AFTER UPDATE ON T_EQUIPOS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_EQUIPOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* T_EQUIPOS  T_USERS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000d444", PARENT_OWNER="", PARENT_TABLE="T_EQUIPOS"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ID_EQUIPO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_EQUIPO <> :new.ID_EQUIPO
  THEN
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_EQUIPO = NULL
      WHERE
        /* %JoinFKPK(T_USERS,:%Old," = ",",") */
        T_USERS.ID_EQUIPO = :old.ID_EQUIPO;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_PRECALIFICACIONES_DEMANDA BEFORE INSERT ON T_PRECALIFICACIONES_DEMANDA for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_PRECALIFICACIONES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_PRECALIFICACIONES_DEMANDA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001016a", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PRECALIFICACIONES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="ID_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_PRECALIFICACIONES_DEMANDA because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_PRECALIFICACIONES_DEMANDA AFTER UPDATE ON T_PRECALIFICACIONES_DEMANDA for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_PRECALIFICACIONES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_PRECALIFICACIONES_DEMANDA on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000102f7", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PRECALIFICACIONES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_17", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_PRECALIFICACIONES_DEMANDA because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_LOCALIDADES AFTER DELETE ON T_LOCALIDADES for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_LOCALIDADES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_CPC on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0002f1e9", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_CPC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ID_LOCALIDAD" */
    DELETE FROM T_CPC
      WHERE
        /*  %JoinFKPK(T_CPC,:%Old," = "," AND") */
        T_CPC.ID_LOCALIDAD = :old.ID_LOCALIDAD;

    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_BARRIOS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_BARRIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="ID_LOCALIDAD" */
    DELETE FROM T_BARRIOS
      WHERE
        /*  %JoinFKPK(T_BARRIOS,:%Old," = "," AND") */
        T_BARRIOS.ID_LOCALIDAD = :old.ID_LOCALIDAD;

    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_USERS on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="ID_LOCALIDAD" */
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_USERS,:%Old," = "," AND") */
        T_USERS.ID_LOCALIDAD = :old.ID_LOCALIDAD;

    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_LOCALIZACIONES on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="ID_LOCALIDAD" */
    DELETE FROM T_LOCALIZACIONES
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES,:%Old," = "," AND") */
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_LOCALIDADES AFTER UPDATE ON T_LOCALIDADES for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_LOCALIDADES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_CPC on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="000458eb", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_CPC"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_CPC
      WHERE
        /*  %JoinFKPK(T_CPC,:%Old," = "," AND") */
        T_CPC.ID_LOCALIDAD = :old.ID_LOCALIDAD;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_LOCALIDADES because T_CPC exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_BARRIOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_BARRIOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_BARRIOS
      WHERE
        /*  %JoinFKPK(T_BARRIOS,:%Old," = "," AND") */
        T_BARRIOS.ID_LOCALIDAD = :old.ID_LOCALIDAD;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_LOCALIDADES because T_BARRIOS exists.'
      );
    END IF;
  END IF;

  /* T_LOCALIDADES  T_USERS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_LOCALIDAD = NULL
      WHERE
        /* %JoinFKPK(T_USERS,:%Old," = ",",") */
        T_USERS.ID_LOCALIDAD = :old.ID_LOCALIDAD;
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_LOCALIZACIONES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="ID_LOCALIDAD" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIDAD <> :new.ID_LOCALIDAD
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIZACIONES
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES,:%Old," = "," AND") */
        T_LOCALIZACIONES.ID_LOCALIDAD = :old.ID_LOCALIDAD;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_LOCALIDADES because T_LOCALIZACIONES exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_LOCALIZACIONES AFTER DELETE ON T_LOCALIZACIONES for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_LOCALIZACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_LOCALIZACIONES  T_LOCALIZACIONES_PERSONAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0001c21d", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="ID_LOCALIZACION" */
    DELETE FROM T_LOCALIZACIONES_PERSONAS
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES_PERSONAS,:%Old," = "," AND") */
        T_LOCALIZACIONES_PERSONAS.ID_LOCALIZACION = :old.ID_LOCALIZACION;

    /* erwin Builtin Trigger */
    /* T_LOCALIZACIONES  T_DEMANDAS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="ID_LOCALIZACION" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_LOCALIZACION = :old.ID_LOCALIZACION;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete T_LOCALIZACIONES because T_DEMANDAS exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_LOCALIZACIONES BEFORE INSERT ON T_LOCALIZACIONES for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_LOCALIZACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_CPC  T_LOCALIZACIONES on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="000392b4", PARENT_OWNER="", PARENT_TABLE="T_CPC"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="ID_CPC""ID_LOCALIDAD" */
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_CPC = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_CPC
            WHERE
              /* %JoinFKPK(:%New,T_CPC," = "," AND") */
              :new.ID_CPC = T_CPC.ID_CPC AND
              :new.ID_LOCALIDAD = T_CPC.ID_LOCALIDAD
        ) 
        /* %JoinPKPK(T_LOCALIZACIONES,:%New," = "," AND") */
         and T_LOCALIZACIONES.ID_LOCALIZACION = :new.ID_LOCALIZACION;

    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_LOCALIZACIONES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="ID_LOCALIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIDADES
      WHERE
        /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
        :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_LOCALIZACIONES because T_LOCALIDADES does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_BARRIOS  T_LOCALIZACIONES on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_BARRIOS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="ID_BARRIO""ID_LOCALIDAD" */
    UPDATE T_LOCALIZACIONES
      SET
        /* %SetFK(T_LOCALIZACIONES,NULL) */
        T_LOCALIZACIONES.ID_BARRIO = NULL,
        T_LOCALIZACIONES.ID_LOCALIDAD = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_BARRIOS
            WHERE
              /* %JoinFKPK(:%New,T_BARRIOS," = "," AND") */
              :new.ID_BARRIO = T_BARRIOS.ID_BARRIO AND
              :new.ID_LOCALIDAD = T_BARRIOS.ID_LOCALIDAD
        ) 
        /* %JoinPKPK(T_LOCALIZACIONES,:%New," = "," AND") */
         and T_LOCALIZACIONES.ID_LOCALIZACION = :new.ID_LOCALIZACION;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_LOCALIZACIONES AFTER UPDATE ON T_LOCALIZACIONES for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_LOCALIZACIONES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_LOCALIZACIONES  T_LOCALIZACIONES_PERSONAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0005eb16", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="ID_LOCALIZACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIZACION <> :new.ID_LOCALIZACION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIZACIONES_PERSONAS
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES_PERSONAS,:%Old," = "," AND") */
        T_LOCALIZACIONES_PERSONAS.ID_LOCALIZACION = :old.ID_LOCALIZACION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_LOCALIZACIONES because T_LOCALIZACIONES_PERSONAS exists.'
      );
    END IF;
  END IF;

  /* T_LOCALIZACIONES  T_DEMANDAS on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_3", FK_COLUMNS="ID_LOCALIZACION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_LOCALIZACION <> :new.ID_LOCALIZACION
  THEN
    UPDATE T_DEMANDAS
      SET
        /* %SetFK(T_DEMANDAS,NULL) */
        T_DEMANDAS.ID_LOCALIZACION = NULL
      WHERE
        /* %JoinFKPK(T_DEMANDAS,:%Old," = ",",") */
        T_DEMANDAS.ID_LOCALIZACION = :old.ID_LOCALIZACION;
  END IF;

  /* erwin Builtin Trigger */
  /* T_CPC  T_LOCALIZACIONES on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CPC"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_21", FK_COLUMNS="ID_CPC""ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_CPC
    WHERE
      /* %JoinFKPK(:%New,T_CPC," = "," AND") */
      :new.ID_CPC = T_CPC.ID_CPC AND
      :new.ID_LOCALIDAD = T_CPC.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_CPC IS NOT NULL AND
    :new.ID_LOCALIDAD IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_LOCALIZACIONES because T_CPC does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_LOCALIZACIONES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_20", FK_COLUMNS="ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIDADES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
      :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_LOCALIZACIONES because T_LOCALIDADES does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_BARRIOS  T_LOCALIZACIONES on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_BARRIOS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_19", FK_COLUMNS="ID_BARRIO""ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_BARRIOS
    WHERE
      /* %JoinFKPK(:%New,T_BARRIOS," = "," AND") */
      :new.ID_BARRIO = T_BARRIOS.ID_BARRIO AND
      :new.ID_LOCALIDAD = T_BARRIOS.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_BARRIO IS NOT NULL AND
    :new.ID_LOCALIDAD IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_LOCALIZACIONES because T_BARRIOS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_MOTIVOS_INTERVENCION AFTER DELETE ON T_MOTIVOS_INTERVENCION for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_MOTIVOS_INTERVENCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_MOTIVOS_INTERVENCION  T_DEMANDAS_MOTIVOS_INTERVENCION on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0000dac5", PARENT_OWNER="", PARENT_TABLE="T_MOTIVOS_INTERVENCION"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="ID_MOTIVO_INTERVENCION" */
    DELETE FROM T_DEMANDAS_MOTIVOS_INTERVENCION
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_MOTIVOS_INTERVENCION,:%Old," = "," AND") */
        T_DEMANDAS_MOTIVOS_INTERVENCION.ID_MOTIVO_INTERVENCION = :old.ID_MOTIVO_INTERVENCION;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_MOTIVOS_INTERVENCION AFTER UPDATE ON T_MOTIVOS_INTERVENCION for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_MOTIVOS_INTERVENCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_MOTIVOS_INTERVENCION  T_DEMANDAS_MOTIVOS_INTERVENCION on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00015c2f", PARENT_OWNER="", PARENT_TABLE="T_MOTIVOS_INTERVENCION"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="ID_MOTIVO_INTERVENCION" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_MOTIVO_INTERVENCION <> :new.ID_MOTIVO_INTERVENCION
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_MOTIVOS_INTERVENCION
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_MOTIVOS_INTERVENCION,:%Old," = "," AND") */
        T_DEMANDAS_MOTIVOS_INTERVENCION.ID_MOTIVO_INTERVENCION = :old.ID_MOTIVO_INTERVENCION;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_MOTIVOS_INTERVENCION because T_DEMANDAS_MOTIVOS_INTERVENCION exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_DEMANDAS_MOTIVOS_INTERVEN BEFORE INSERT ON T_DEMANDAS_MOTIVOS_INTERVENCION for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDAS_MOTIVOS_INTERVENCION 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_MOTIVOS_INTERVENCION  T_DEMANDAS_MOTIVOS_INTERVENCION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000266c2", PARENT_OWNER="", PARENT_TABLE="T_MOTIVOS_INTERVENCION"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="ID_MOTIVO_INTERVENCION" */
    SELECT count(*) INTO NUMROWS
      FROM T_MOTIVOS_INTERVENCION
      WHERE
        /* %JoinFKPK(:%New,T_MOTIVOS_INTERVENCION," = "," AND") */
        :new.ID_MOTIVO_INTERVENCION = T_MOTIVOS_INTERVENCION.ID_MOTIVO_INTERVENCION;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_MOTIVOS_INTERVENCION because T_MOTIVOS_INTERVENCION does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_MOTIVOS_INTERVENCION on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_25", FK_COLUMNS="ID_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_MOTIVOS_INTERVENCION because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDAS_MOTIVOS_INTERVEN AFTER UPDATE ON T_DEMANDAS_MOTIVOS_INTERVENCION for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDAS_MOTIVOS_INTERVENCION 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_MOTIVOS_INTERVENCION  T_DEMANDAS_MOTIVOS_INTERVENCION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00025bb6", PARENT_OWNER="", PARENT_TABLE="T_MOTIVOS_INTERVENCION"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="ID_MOTIVO_INTERVENCION" */
  SELECT count(*) INTO NUMROWS
    FROM T_MOTIVOS_INTERVENCION
    WHERE
      /* %JoinFKPK(:%New,T_MOTIVOS_INTERVENCION," = "," AND") */
      :new.ID_MOTIVO_INTERVENCION = T_MOTIVOS_INTERVENCION.ID_MOTIVO_INTERVENCION;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_MOTIVOS_INTERVENCION because T_MOTIVOS_INTERVENCION does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_MOTIVOS_INTERVENCION on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_MOTIVOS_INTERVENCION"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_25", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_MOTIVOS_INTERVENCION because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_ORIGENES_DEMANDA AFTER DELETE ON T_ORIGENES_DEMANDA for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_ORIGENES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_ORIGENES_DEMANDA  T_DEMANDAS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001d9da", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete T_ORIGENES_DEMANDA because T_DEMANDAS exists.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_ORIGENES_DEMANDA  T_SUBORIGENES_DEMANDA on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_SUBORIGENES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
    DELETE FROM T_SUBORIGENES_DEMANDA
      WHERE
        /*  %JoinFKPK(T_SUBORIGENES_DEMANDA,:%Old," = "," AND") */
        T_SUBORIGENES_DEMANDA.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_ORIGENES_DEMANDA AFTER UPDATE ON T_ORIGENES_DEMANDA for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_ORIGENES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_ORIGENES_DEMANDA  T_DEMANDAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00027b2a", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_6", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_ORIGEN_DEMANDA <> :new.ID_ORIGEN_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_ORIGENES_DEMANDA because T_DEMANDAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_ORIGENES_DEMANDA  T_SUBORIGENES_DEMANDA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_SUBORIGENES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_ORIGEN_DEMANDA <> :new.ID_ORIGEN_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_SUBORIGENES_DEMANDA
      WHERE
        /*  %JoinFKPK(T_SUBORIGENES_DEMANDA,:%Old," = "," AND") */
        T_SUBORIGENES_DEMANDA.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_ORIGENES_DEMANDA because T_SUBORIGENES_DEMANDA exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_PERSONAS AFTER DELETE ON T_PERSONAS for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_NNYA_SCORES on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0004d52e", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_NNYA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="NNYA" */
    DELETE FROM T_NNYA_SCORES
      WHERE
        /*  %JoinFKPK(T_NNYA_SCORES,:%Old," = "," AND") */
        T_NNYA_SCORES.NNYA = :old.ID_PERSONA;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_VINCULOS_PERSONA on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="ID_PERSONA_SECUNDARIA" */
    DELETE FROM T_VINCULOS_PERSONA
      WHERE
        /*  %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_PERSONA_SECUNDARIA = :old.ID_PERSONA;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_VINCULOS_PERSONA on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="ID_PERSONA_PRINCIPAL" */
    DELETE FROM T_VINCULOS_PERSONA
      WHERE
        /*  %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_PERSONA_PRINCIPAL = :old.ID_PERSONA;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_DEMANDAS_PERSONAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="ID_PERSONA" */
    DELETE FROM T_DEMANDAS_PERSONAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_PERSONAS,:%Old," = "," AND") */
        T_DEMANDAS_PERSONAS.ID_PERSONA = :old.ID_PERSONA;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_22", FK_COLUMNS="ID_PERSONA" */
    DELETE FROM T_PERSONAS_CONDICIONES_VULNERABILIDAD
      WHERE
        /*  %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = "," AND") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_PERSONA = :old.ID_PERSONA;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_LOCALIZACIONES_PERSONAS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ID_PERSONA" */
    DELETE FROM T_LOCALIZACIONES_PERSONAS
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES_PERSONAS,:%Old," = "," AND") */
        T_LOCALIZACIONES_PERSONAS.ID_PERSONA = :old.ID_PERSONA;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_PERSONAS AFTER UPDATE ON T_PERSONAS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_NNYA_SCORES on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00078dc0", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_NNYA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="NNYA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_NNYA_SCORES
      WHERE
        /*  %JoinFKPK(T_NNYA_SCORES,:%Old," = "," AND") */
        T_NNYA_SCORES.NNYA = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_NNYA_SCORES exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_VINCULOS_PERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="ID_PERSONA_SECUNDARIA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_VINCULOS_PERSONA
      WHERE
        /*  %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_PERSONA_SECUNDARIA = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_VINCULOS_PERSONA exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_VINCULOS_PERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="ID_PERSONA_PRINCIPAL" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_VINCULOS_PERSONA
      WHERE
        /*  %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_PERSONA_PRINCIPAL = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_VINCULOS_PERSONA exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_DEMANDAS_PERSONAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="ID_PERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_PERSONAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_PERSONAS,:%Old," = "," AND") */
        T_DEMANDAS_PERSONAS.ID_PERSONA = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_DEMANDAS_PERSONAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_22", FK_COLUMNS="ID_PERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS_CONDICIONES_VULNERABILIDAD
      WHERE
        /*  %JoinFKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%Old," = "," AND") */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_PERSONA = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_PERSONAS_CONDICIONES_VULNERABILIDAD exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_LOCALIZACIONES_PERSONAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ID_PERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_PERSONA <> :new.ID_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIZACIONES_PERSONAS
      WHERE
        /*  %JoinFKPK(T_LOCALIZACIONES_PERSONAS,:%Old," = "," AND") */
        T_LOCALIZACIONES_PERSONAS.ID_PERSONA = :old.ID_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_PERSONAS because T_LOCALIZACIONES_PERSONAS exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_LOCALIZACIONES_PERSONAS BEFORE INSERT ON T_LOCALIZACIONES_PERSONAS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_LOCALIZACIONES_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_LOCALIZACIONES  T_LOCALIZACIONES_PERSONAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0002366e", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="ID_LOCALIZACION" */
    SELECT count(*) INTO NUMROWS
      FROM T_LOCALIZACIONES
      WHERE
        /* %JoinFKPK(:%New,T_LOCALIZACIONES," = "," AND") */
        :new.ID_LOCALIZACION = T_LOCALIZACIONES.ID_LOCALIZACION;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_LOCALIZACIONES_PERSONAS because T_LOCALIZACIONES does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_LOCALIZACIONES_PERSONAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ID_PERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_LOCALIZACIONES_PERSONAS because T_PERSONAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_LOCALIZACIONES_PERSONAS AFTER UPDATE ON T_LOCALIZACIONES_PERSONAS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_LOCALIZACIONES_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_LOCALIZACIONES  T_LOCALIZACIONES_PERSONAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00024653", PARENT_OWNER="", PARENT_TABLE="T_LOCALIZACIONES"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_14", FK_COLUMNS="ID_LOCALIZACION" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIZACIONES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIZACIONES," = "," AND") */
      :new.ID_LOCALIZACION = T_LOCALIZACIONES.ID_LOCALIZACION;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_LOCALIZACIONES_PERSONAS because T_LOCALIZACIONES does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_LOCALIZACIONES_PERSONAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_LOCALIZACIONES_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="ID_PERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_LOCALIZACIONES_PERSONAS because T_PERSONAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_PERSONAS_CONDICIONES_VULN BEFORE INSERT ON T_PERSONAS_CONDICIONES_VULNERABILIDAD for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_PERSONAS_CONDICIONES_VULNERABILIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0004251a", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ID_DEMANDA" */
    UPDATE T_PERSONAS_CONDICIONES_VULNERABILIDAD
      SET
        /* %SetFK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,NULL) */
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_DEMANDA = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_DEMANDAS
            WHERE
              /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
              :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA
        ) 
        /* %JoinPKPK(T_PERSONAS_CONDICIONES_VULNERABILIDAD,:%New," = "," AND") */
         and T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_PERSONA = :new.ID_PERSONA AND
        T_PERSONAS_CONDICIONES_VULNERABILIDAD.ID_CONDICION_VULNERABILIDAD = :new.ID_CONDICION_VULNERABILIDAD;

    /* erwin Builtin Trigger */
    /* T_CONDICIONES_VULNERABILIDAD  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CONDICIONES_VULNERABILIDAD"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ID_CONDICION_VULNERABILIDAD" */
    SELECT count(*) INTO NUMROWS
      FROM T_CONDICIONES_VULNERABILIDAD
      WHERE
        /* %JoinFKPK(:%New,T_CONDICIONES_VULNERABILIDAD," = "," AND") */
        :new.ID_CONDICION_VULNERABILIDAD = T_CONDICIONES_VULNERABILIDAD.ID_CONDICION_VULNERABILIDAD;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_PERSONAS_CONDICIONES_VULNERABILIDAD because T_CONDICIONES_VULNERABILIDAD does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_22", FK_COLUMNS="ID_PERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_PERSONAS_CONDICIONES_VULNERABILIDAD because T_PERSONAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_PERSONAS_CONDICIONES_VULN AFTER UPDATE ON T_PERSONAS_CONDICIONES_VULNERABILIDAD for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_PERSONAS_CONDICIONES_VULNERABILIDAD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003d96c", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_24", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_DEMANDA IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_PERSONAS_CONDICIONES_VULNERABILIDAD because T_DEMANDAS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_CONDICIONES_VULNERABILIDAD  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_CONDICIONES_VULNERABILIDAD"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_23", FK_COLUMNS="ID_CONDICION_VULNERABILIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_CONDICIONES_VULNERABILIDAD
    WHERE
      /* %JoinFKPK(:%New,T_CONDICIONES_VULNERABILIDAD," = "," AND") */
      :new.ID_CONDICION_VULNERABILIDAD = T_CONDICIONES_VULNERABILIDAD.ID_CONDICION_VULNERABILIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_PERSONAS_CONDICIONES_VULNERABILIDAD because T_CONDICIONES_VULNERABILIDAD does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_PERSONAS_CONDICIONES_VULNERABILIDAD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_PERSONAS_CONDICIONES_VULNERABILIDAD"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_22", FK_COLUMNS="ID_PERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_PERSONAS_CONDICIONES_VULNERABILIDAD because T_PERSONAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_DEMANDAS_PERSONAS BEFORE INSERT ON T_DEMANDAS_PERSONAS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDAS_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_DEMANDAS_PERSONAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00021146", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="ID_PERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_PERSONAS because T_PERSONAS does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_PERSONAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="ID_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_PERSONAS because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDAS_PERSONAS AFTER UPDATE ON T_DEMANDAS_PERSONAS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDAS_PERSONAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_DEMANDAS_PERSONAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002124b", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_28", FK_COLUMNS="ID_PERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.ID_PERSONA = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_PERSONAS because T_PERSONAS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_PERSONAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_PERSONAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_PERSONAS because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_NNYA_SCORES BEFORE INSERT ON T_NNYA_SCORES for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_NNYA_SCORES 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_NNYA_SCORES on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0000e6ca", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_NNYA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="NNYA" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.NNYA = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_NNYA_SCORES because T_PERSONAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_NNYA_SCORES AFTER UPDATE ON T_NNYA_SCORES for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_NNYA_SCORES 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_NNYA_SCORES on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0000f1ea", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_NNYA_SCORES"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_36", FK_COLUMNS="NNYA" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.NNYA = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_NNYA_SCORES because T_PERSONAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_SUBORIGENES_DEMANDA AFTER DELETE ON T_SUBORIGENES_DEMANDA for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_SUBORIGENES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_SUBORIGENES_DEMANDA  T_DEMANDAS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001175e", PARENT_OWNER="", PARENT_TABLE="T_SUBORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="ID_SUBORIGEN_DEMANDA""ID_ORIGEN_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_SUBORIGEN_DEMANDA = :old.ID_SUBORIGEN_DEMANDA AND
        T_DEMANDAS.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete T_SUBORIGENES_DEMANDA because T_DEMANDAS exists.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_SUBORIGENES_DEMANDA BEFORE INSERT ON T_SUBORIGENES_DEMANDA for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_SUBORIGENES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_ORIGENES_DEMANDA  T_SUBORIGENES_DEMANDA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001275e", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_SUBORIGENES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_ORIGENES_DEMANDA
      WHERE
        /* %JoinFKPK(:%New,T_ORIGENES_DEMANDA," = "," AND") */
        :new.ID_ORIGEN_DEMANDA = T_ORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_SUBORIGENES_DEMANDA because T_ORIGENES_DEMANDA does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_SUBORIGENES_DEMANDA AFTER UPDATE ON T_SUBORIGENES_DEMANDA for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_SUBORIGENES_DEMANDA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_SUBORIGENES_DEMANDA  T_DEMANDAS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00029d70", PARENT_OWNER="", PARENT_TABLE="T_SUBORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_7", FK_COLUMNS="ID_SUBORIGEN_DEMANDA""ID_ORIGEN_DEMANDA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_SUBORIGEN_DEMANDA <> :new.ID_SUBORIGEN_DEMANDA OR 
    :old.ID_ORIGEN_DEMANDA <> :new.ID_ORIGEN_DEMANDA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS,:%Old," = "," AND") */
        T_DEMANDAS.ID_SUBORIGEN_DEMANDA = :old.ID_SUBORIGEN_DEMANDA AND
        T_DEMANDAS.ID_ORIGEN_DEMANDA = :old.ID_ORIGEN_DEMANDA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_SUBORIGENES_DEMANDA because T_DEMANDAS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_ORIGENES_DEMANDA  T_SUBORIGENES_DEMANDA on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_ORIGENES_DEMANDA"
    CHILD_OWNER="", CHILD_TABLE="T_SUBORIGENES_DEMANDA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_2", FK_COLUMNS="ID_ORIGEN_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_ORIGENES_DEMANDA
    WHERE
      /* %JoinFKPK(:%New,T_ORIGENES_DEMANDA," = "," AND") */
      :new.ID_ORIGEN_DEMANDA = T_ORIGENES_DEMANDA.ID_ORIGEN_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_SUBORIGENES_DEMANDA because T_ORIGENES_DEMANDA does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_TIPOS_VINCULOS_PERSONA AFTER DELETE ON T_TIPOS_VINCULOS_PERSONA for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_TIPOS_VINCULOS_PERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_TIPOS_VINCULOS_PERSONA  T_VINCULOS_PERSONA on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000fd77", PARENT_OWNER="", PARENT_TABLE="T_TIPOS_VINCULOS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="ID_TIPO_VINCULO_PERSONA" */
    UPDATE T_VINCULOS_PERSONA
      SET
        /* %SetFK(T_VINCULOS_PERSONA,NULL) */
        T_VINCULOS_PERSONA.ID_TIPO_VINCULO_PERSONA = NULL
      WHERE
        /* %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_TIPO_VINCULO_PERSONA = :old.ID_TIPO_VINCULO_PERSONA;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_TIPOS_VINCULOS_PERSONA AFTER UPDATE ON T_TIPOS_VINCULOS_PERSONA for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_TIPOS_VINCULOS_PERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_TIPOS_VINCULOS_PERSONA  T_VINCULOS_PERSONA on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00014688", PARENT_OWNER="", PARENT_TABLE="T_TIPOS_VINCULOS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="ID_TIPO_VINCULO_PERSONA" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_TIPO_VINCULO_PERSONA <> :new.ID_TIPO_VINCULO_PERSONA
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_VINCULOS_PERSONA
      WHERE
        /*  %JoinFKPK(T_VINCULOS_PERSONA,:%Old," = "," AND") */
        T_VINCULOS_PERSONA.ID_TIPO_VINCULO_PERSONA = :old.ID_TIPO_VINCULO_PERSONA;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_TIPOS_VINCULOS_PERSONA because T_VINCULOS_PERSONA exists.'
      );
    END IF;
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER  tD_T_USERS AFTER DELETE ON T_USERS for each row
-- erwin Builtin Trigger
-- DELETE trigger on T_USERS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_USERS  T_DEMANDAS_ASIGNADOS on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="0000a90f", PARENT_OWNER="", PARENT_TABLE="T_USERS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ID_USER" */
    DELETE FROM T_DEMANDAS_ASIGNADOS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_ASIGNADOS,:%Old," = "," AND") */
        T_DEMANDAS_ASIGNADOS.ID_USER = :old.ID_USER;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tI_T_USERS BEFORE INSERT ON T_USERS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_USERS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_EQUIPOS  T_USERS on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0001e65a", PARENT_OWNER="", PARENT_TABLE="T_EQUIPOS"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ID_EQUIPO" */
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_EQUIPO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_EQUIPOS
            WHERE
              /* %JoinFKPK(:%New,T_EQUIPOS," = "," AND") */
              :new.ID_EQUIPO = T_EQUIPOS.ID_EQUIPO
        ) 
        /* %JoinPKPK(T_USERS,:%New," = "," AND") */
         and T_USERS.ID_USER = :new.ID_USER;

    /* erwin Builtin Trigger */
    /* T_LOCALIDADES  T_USERS on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="ID_LOCALIDAD" */
    UPDATE T_USERS
      SET
        /* %SetFK(T_USERS,NULL) */
        T_USERS.ID_LOCALIDAD = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM T_LOCALIDADES
            WHERE
              /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
              :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD
        ) 
        /* %JoinPKPK(T_USERS,:%New," = "," AND") */
         and T_USERS.ID_USER = :new.ID_USER;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_USERS AFTER UPDATE ON T_USERS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_USERS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_USERS  T_DEMANDAS_ASIGNADOS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00033e05", PARENT_OWNER="", PARENT_TABLE="T_USERS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ID_USER" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    :old.ID_USER <> :new.ID_USER
  THEN
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS_ASIGNADOS
      WHERE
        /*  %JoinFKPK(T_DEMANDAS_ASIGNADOS,:%Old," = "," AND") */
        T_DEMANDAS_ASIGNADOS.ID_USER = :old.ID_USER;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update T_USERS because T_DEMANDAS_ASIGNADOS exists.'
      );
    END IF;
  END IF;

  /* erwin Builtin Trigger */
  /* T_EQUIPOS  T_USERS on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_EQUIPOS"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="ID_EQUIPO" */
  SELECT count(*) INTO NUMROWS
    FROM T_EQUIPOS
    WHERE
      /* %JoinFKPK(:%New,T_EQUIPOS," = "," AND") */
      :new.ID_EQUIPO = T_EQUIPOS.ID_EQUIPO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_EQUIPO IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_USERS because T_EQUIPOS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_LOCALIDADES  T_USERS on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_LOCALIDADES"
    CHILD_OWNER="", CHILD_TABLE="T_USERS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="ID_LOCALIDAD" */
  SELECT count(*) INTO NUMROWS
    FROM T_LOCALIDADES
    WHERE
      /* %JoinFKPK(:%New,T_LOCALIDADES," = "," AND") */
      :new.ID_LOCALIDAD = T_LOCALIDADES.ID_LOCALIDAD;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    :new.ID_LOCALIDAD IS NOT NULL AND
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_USERS because T_LOCALIDADES does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_DEMANDAS_ASIGNADOS BEFORE INSERT ON T_DEMANDAS_ASIGNADOS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDAS_ASIGNADOS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_USERS  T_DEMANDAS_ASIGNADOS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000216ca", PARENT_OWNER="", PARENT_TABLE="T_USERS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ID_USER" */
    SELECT count(*) INTO NUMROWS
      FROM T_USERS
      WHERE
        /* %JoinFKPK(:%New,T_USERS," = "," AND") */
        :new.ID_USER = T_USERS.ID_USER;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_ASIGNADOS because T_USERS does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_ASIGNADOS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ID_DEMANDA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_ASIGNADOS because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDAS_ASIGNADOS AFTER UPDATE ON T_DEMANDAS_ASIGNADOS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDAS_ASIGNADOS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_USERS  T_DEMANDAS_ASIGNADOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002017d", PARENT_OWNER="", PARENT_TABLE="T_USERS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_16", FK_COLUMNS="ID_USER" */
  SELECT count(*) INTO NUMROWS
    FROM T_USERS
    WHERE
      /* %JoinFKPK(:%New,T_USERS," = "," AND") */
      :new.ID_USER = T_USERS.ID_USER;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_ASIGNADOS because T_USERS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_ASIGNADOS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_ASIGNADOS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_15", FK_COLUMNS="ID_DEMANDA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.ID_DEMANDA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_ASIGNADOS because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_VINCULOS_PERSONA BEFORE INSERT ON T_VINCULOS_PERSONA for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_VINCULOS_PERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_TIPOS_VINCULOS_PERSONA  T_VINCULOS_PERSONA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00038cf8", PARENT_OWNER="", PARENT_TABLE="T_TIPOS_VINCULOS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="ID_TIPO_VINCULO_PERSONA" */
    SELECT count(*) INTO NUMROWS
      FROM T_TIPOS_VINCULOS_PERSONA
      WHERE
        /* %JoinFKPK(:%New,T_TIPOS_VINCULOS_PERSONA," = "," AND") */
        :new.ID_TIPO_VINCULO_PERSONA = T_TIPOS_VINCULOS_PERSONA.ID_TIPO_VINCULO_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_VINCULOS_PERSONA because T_TIPOS_VINCULOS_PERSONA does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_VINCULOS_PERSONA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="ID_PERSONA_SECUNDARIA" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.ID_PERSONA_SECUNDARIA = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_VINCULOS_PERSONA because T_PERSONAS does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_PERSONAS  T_VINCULOS_PERSONA on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="ID_PERSONA_PRINCIPAL" */
    SELECT count(*) INTO NUMROWS
      FROM T_PERSONAS
      WHERE
        /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
        :new.ID_PERSONA_PRINCIPAL = T_PERSONAS.ID_PERSONA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_VINCULOS_PERSONA because T_PERSONAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_VINCULOS_PERSONA AFTER UPDATE ON T_VINCULOS_PERSONA for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_VINCULOS_PERSONA 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_TIPOS_VINCULOS_PERSONA  T_VINCULOS_PERSONA on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0003862c", PARENT_OWNER="", PARENT_TABLE="T_TIPOS_VINCULOS_PERSONA"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_31", FK_COLUMNS="ID_TIPO_VINCULO_PERSONA" */
  SELECT count(*) INTO NUMROWS
    FROM T_TIPOS_VINCULOS_PERSONA
    WHERE
      /* %JoinFKPK(:%New,T_TIPOS_VINCULOS_PERSONA," = "," AND") */
      :new.ID_TIPO_VINCULO_PERSONA = T_TIPOS_VINCULOS_PERSONA.ID_TIPO_VINCULO_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_VINCULOS_PERSONA because T_TIPOS_VINCULOS_PERSONA does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_VINCULOS_PERSONA on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_30", FK_COLUMNS="ID_PERSONA_SECUNDARIA" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.ID_PERSONA_SECUNDARIA = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_VINCULOS_PERSONA because T_PERSONAS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_PERSONAS  T_VINCULOS_PERSONA on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_PERSONAS"
    CHILD_OWNER="", CHILD_TABLE="T_VINCULOS_PERSONA"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_29", FK_COLUMNS="ID_PERSONA_PRINCIPAL" */
  SELECT count(*) INTO NUMROWS
    FROM T_PERSONAS
    WHERE
      /* %JoinFKPK(:%New,T_PERSONAS," = "," AND") */
      :new.ID_PERSONA_PRINCIPAL = T_PERSONAS.ID_PERSONA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_VINCULOS_PERSONA because T_PERSONAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/


CREATE  TRIGGER tI_T_DEMANDAS_VINCULADAS BEFORE INSERT ON T_DEMANDAS_VINCULADAS for each row
-- erwin Builtin Trigger
-- INSERT trigger on T_DEMANDAS_VINCULADAS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0002168d", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_38", FK_COLUMNS="DEMANDA_SUCESORA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.DEMANDA_SUCESORA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_VINCULADAS because T_DEMANDAS does not exist.'
      );
    END IF;

    /* erwin Builtin Trigger */
    /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="DEMANDA_PREDECESORA" */
    SELECT count(*) INTO NUMROWS
      FROM T_DEMANDAS
      WHERE
        /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
        :new.DEMANDA_PREDECESORA = T_DEMANDAS.ID_DEMANDA;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert T_DEMANDAS_VINCULADAS because T_DEMANDAS does not exist.'
      );
    END IF;


-- erwin Builtin Trigger
END;
/

CREATE  TRIGGER tU_T_DEMANDAS_VINCULADAS AFTER UPDATE ON T_DEMANDAS_VINCULADAS for each row
-- erwin Builtin Trigger
-- UPDATE trigger on T_DEMANDAS_VINCULADAS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00022770", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_38", FK_COLUMNS="DEMANDA_SUCESORA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.DEMANDA_SUCESORA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_VINCULADAS because T_DEMANDAS does not exist.'
    );
  END IF;

  /* erwin Builtin Trigger */
  /* T_DEMANDAS  T_DEMANDAS_VINCULADAS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="T_DEMANDAS"
    CHILD_OWNER="", CHILD_TABLE="T_DEMANDAS_VINCULADAS"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_37", FK_COLUMNS="DEMANDA_PREDECESORA" */
  SELECT count(*) INTO NUMROWS
    FROM T_DEMANDAS
    WHERE
      /* %JoinFKPK(:%New,T_DEMANDAS," = "," AND") */
      :new.DEMANDA_PREDECESORA = T_DEMANDAS.ID_DEMANDA;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update T_DEMANDAS_VINCULADAS because T_DEMANDAS does not exist.'
    );
  END IF;


-- erwin Builtin Trigger
END;
/

