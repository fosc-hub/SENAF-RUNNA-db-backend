@startuml

' !define ENTITY
!define PRIMARY_KEY(x) <b><color:blue>x</color></b>
!define FOREIGN_KEY(x) <color:green>x</color>

hide circle

entity CaratulaDemanda {
    + PRIMARY_KEY(id)
    --
    Nombre
    DNI
}

entity LocalizacionDemanda {
    + PRIMARY_KEY(id)
    --
    Calle
    Numero
    Barrio
    Localidad
    Provincia
    Referencias_geograficas
}

entity Estudios {
    + PRIMARY_KEY(id)
    --
    Institucion_educactiva
    Curso
    Nivel
    Turno
}

entity Salud {
    + PRIMARY_KEY(id)
    --
    Institucion_sanitaria
}

entity NNyAConviviente {
    + PRIMARY_KEY(id)
    --
    Nombre_y_Apellido
    Date_birth
    Genero
    Comentarios
    --
    DD_vulnerados = FOREIGN_KEY(DD_vulnerados)
    Estudios = FOREIGN_KEY(Estudios) (default null)
    Salud = FOREIGN_KEY(Salud) (default null)
    --
    method()
}

entity Adulto_Conviviente {
    + PRIMARY_KEY(id)
    --
    Nombre_y_Apellido
    Date_birth
    Genero
    Observaciones
    --
    vinculo = FOREIGN_KEY(VinculoTipo)
    --
    method()
}

entity Autor_Vulnerador {
    + PRIMARY_KEY(id)
    --
    Nombre_y_Apellido
    Date_birth
    Genero
    Comentarios
    Convive_?
    --
    vinculo = FOREIGN_KEY(VinculoTipo)
    --
    method()
}

entity InstitucionPrograma {
    + PRIMARY_KEY(id)
    --
    Contacto
}

entity UsuarioLinea {
    + PRIMARY_KEY(id)
    --
    Nombre_y_Apellido
    Date_birth
    Genero
    Telefono
    Nombre_y_Cargo_Responsable
    --
    vinculo = FOREIGN_KEY(VinculoTipo)
    institucion_o_programa = FOREIGN_KEY(InstitucionPrograma)
    --
    method()
}

entity VulneracionInformada {
    + PRIMARY_KEY(id)
    --
    Motivo
    Ambito
    Principal_Derecho_vul
    Problematica_identificada
    Prioridad_de_intervencia
    Nombre_y_Cargo_Operados
}

entity EstadoTipo {
    description
}

' Ingreso = Entrada = Nuevo Registro = Demanda
' pensar en que derivado = asignar, y hacer tabla intermedia entre users y demandas
entity Demanda {
    + PRIMARY_KEY(id)
    --
    attr: type
    Origen
    Asignado
    Date
    ID_Notificacion_Manual
    Notificacion_nro
    Descripcion
    --
    Derivado = FOREIGN_KEY(Users)
    Caratula = FOREIGN_KEY(CaratulaDemanda)
    Localizacion_Demanda = FOREIGN_KEY(LocalizacionDemanda)
    NNyA_Conviviente = FOREIGN_KEY(NNyAConviviente)
    Adulto_Conviviente = FOREIGN_KEY(AdultoConviviente)
    Autor_Vulnerador = FOREIGN_KEY(Autor_Vulnerador)
    Usuario_Linea = FOREIGN_KEY(UsuarioLinea)
    Vulneracion_Informada = FOREIGN_KEY(VulneracionInformada)
    Legajo = FOREIGN_KEY(Legago) (default Null)
    Estado = FOREIGN_KEY(EstadoTipo)
    --
    Evaluar()
}

entity ActividadTipo {
    + PRIMARY_KEY(id)
    --
    Descripcion
}

' Actividad = Historial
' ArchivoAdjuntos = Puede ser que se storee en una tabla externa, o de una API
entity Actividad {
    + PRIMARY_KEY(id)
    --
    Descripcion
    Comentarios
    Date
    ArchivoAdjunto
    --
    Actividad = FOREIGN_KEY(ActividadTipo)
    Demanda = FOREIGN_KEY(Demanda)
    Institucion = FOREIGN_KEY(InstitucionPrograma)
    --
    method()
}

entity Respuesta {
    + PRIMARY_KEY(id)
    --
    Date_birth
    mail
    mensaje
    --
    Demanda = FOREIGN_KEY(Demanda)
    Institucion = FOREIGN_KEY(InstitucionPrograma)
    --
    enviar_respuesta(mail)
}

entity DatosDelCaso {
    + PRIMARY_KEY(id)
    --
    Veridica
    Corroborada
    Comentarios
}

entity ActividadesRegistradas {
    + PRIMARY_KEY(id)
    --
    Veridica
    Corroborada
    Comentarios
}

entity Valoracion {
    + PRIMARY_KEY(id)
    --
    Comentarios
    --
    Gravedad = FOREIGN_KEY(GravedadTipo)
    Urgencia = FOREIGN_KEY(UrgenciaTipo)
}

entity AccionesNecesarias {
    + PRIMARY_KEY(id)
    --
    Apertura del legajo --> Motivos
    MPI/MPE --> Motivos
    Archivar --> Motivos
    Rechazar --> Motivos
}

entity Evaluacion {
    + PRIMARY_KEY(id)
    --
    Comentarios
    ArchivosAdjunto
    --
    Datos_del_caso = FOREIGN_KEY(DatosDelCaso)
    Actividades_registradas = FOREIGN_KEY(ActividadesRegistradas)
    --
    method()
}

@enduml


' entity Company {
'     + PRIMARY_KEY(id)
'     --
'     attr: type
'     --
'     FOREIGN_KEY(Sectional) (null True)
'     --
'     method()
' }

