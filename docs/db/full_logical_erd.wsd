"@startuml full_logical_erd"

!define PRIMARY_KEY(x) <b><color:blue>x</color></b>
!define FOREIGN_KEY(x) <color:green>x</color>
!define COMPOSITE_KEY(x, y) <color:LightSalmon>x, y</color>

entity T_DEMANDA_SCORE {
    + PRIMARY_KEY(id)
    --
    ultima_actualizacion : datetime, null=False, autogenerate
    score : float, null=False
    score_condiciones_vulnerabilidad : float, null=False
    score_vulneracion : float, null=False
    score_motivos_intervencion : float, null=False
    score_indicadores_valoracion : float, null=False
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : OneToOneField, on_delete=CASCADE, unique=True, null=False, blank=False
    --
}

entity T_BLOQUE_DATOS_REMITENTE {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_TIPO_INSTITUCION_DEMANDA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    bloque_datos_remitente: FOREIGN_KEY(T_BLOQUE_DATOS_REMITENTE) : on_delete=CASCADE, null=False
    --
}

entity T_AMBITO_VULNERACION {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_TIPO_PRESUNTO_DELITO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_INFORME_101 {
    + PRIMARY_KEY(id)
    --
    fecha_y_hora : datetime, null=False, default=datetime.now()
    fields : json, null=False, blank=False
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    --
}

entity T_DEMANDA {
    + PRIMARY_KEY(id)
    --
    fecha_creacion : datetime, null=False, autogenerate
    ultima_actualizacion : datetime, null=False, autogenerate

    fecha_ingreso_senaf: date, null=False
    fecha_oficio_documento : date, null=False

    descripcion : text, null=True, blank=True

    estado_demanda : (
        SIN_ASIGNAR,
        CONSTATACION,
        EVALUACION,
        PENDIENTE_AUTORIZACION,
        ARCHIVADA,
        ADMITIDA,
    ) : null=False, blank=False, default=SIN ASIGNAR

    observaciones : text, null=True, blank=True, placeholder="Observaciones sobre los niños, adultos, cantidad de personas, etc."

    envio_de_respuesta: (
        NO_NECESARIO,
        PENDIENTE,
        ENVIADO
    ) : null=False, blank=False, default=NO_NECESARIO

    tipo_demanda : (
        DE_PROTECCION,
        PENAL_JUVENIL,
    ) : null=False, blank=False

    adjuntos : List<Blob>, null=True, blank=True // Admite documentos Word, PDF, imágenes

    --
    localizacion: FOREIGN_KEY(T_LOCALIZACION) : on_delete=PROTECT, null=False

    ambito_vulneracion: FOREIGN_KEY(T_AMBITO_VULNERACION) : on_delete=PROTECT, null=True, blank=True

    tipos_presuntos_delitos: FOREIGN_KEY(T_TIPO_PRESUNTO_DELITO) : on_delete=PROTECT, null=True, blank=True

    bloque_datos_remitente: FOREIGN_KEY(T_BLOQUE_DATOS_REMITENTE) : on_delete=PROTECT, null=False
    tipo_institucion: FOREIGN_KEY(T_TIPO_INSTITUCION_DEMANDA) : on_delete=PROTECT, null=True, blank=True
    institucion: FOREIGN_KEY(T_INSTITUCION_DEMANDA) : on_delete=PROTECT, null=True, blank=True

    motivo_ingreso: FOREIGN_KEY(T_CATEGORIA_MOTIVO) : on_delete=SET_NULL, null=True, blank=True
    submotivo_ingreso: FOREIGN_KEY(T_CATEGORIA_SUBMOTIVO) : on_delete=SET_NULL, null=True, blank=True

    registrado_por_user: FOREIGN_KEY(T_USER) : on_delete=SET_NULL, autogenerate
    registrado_por_user_zona: FOREIGN_KEY(T_ZONA) : on_delete=SET_NULL, autogenerate
    --

    * onCreate( {
        ** Create ( T_DEMANDA_SCORE with demanda=self )
        
        ** if institucion.DOES_NOT_EXIST:
            CREATE( T_INSTITUCION_SANITARIA with nombre=institucion, tipo_institucion=tipo_institucion )
        
        ** if tipo_demanda==DE_PROTECCION:
            Validar(
                self.ambito_vulneracion==None,
                "El ambito de vulneracion es obligatorio para una demanda de proteccion"
            )
            Validar(
                self.tipos_presuntos_delitos!=None,
                "El tipo de presunto delito debe ser None para una demanda de proteccion"
            )
        ** if tipo_demanda==PENAL_JUVENIL:
            Validar(
                self.tipos_presuntos_delitos==None,
                "El tipo de presunto delito es obligatorio para una demanda penal juvenil"
            )
        ** if tipo_institucion!=None:
            Validar(
                self.bloque_datos_remitente==self.tipo_institucion.bloque_datos_remitente,
                "El bloque de datos del remitente debe ser el mismo que el del tipo de institucion"
            )

        ** if submotivo_ingreso!=None:
            Validar(
                self.motivo_ingreso==self.submotivo_ingreso.motivo,
                "El motivo de ingreso debe ser el mismo que el del submotivo de ingreso"
            )


    } )

    * onUpdate( {
        ** if estado_demanda==EVALUACION:
            Validar(
                self.user == self.user_responsable,
                "El usuario asignado debe ser el mismo que el usuario que envía a evaluación"
            )
        ** if user_responsable.zona != self.zona_asignada:
            Validar(
                self.user == self.user_responsable,
                "El usuario asignado debe ser de la misma zona que la demanda"
            )
    } )
    --
}

entity T_INSTITUCION_DEMANDA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    tipo_institucion: FOREIGN_KEY(T_TIPO_INSTITUCION_DEMANDA) : on_delete=CASCADE, null=False

}

entity T_TIPO_CODIGO_DEMANDA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    datatype : (
        STRING,
        INT
    ) : null=False, blank=False
    --
    bloque_datos_remitente: FOREIGN_KEY(T_BLOQUE_DATOS_REMITENTE) : on_delete=CASCADE, null=False
}

entity T_CODIGO_DEMANDA {
    + PRIMARY_KEY(id)
    --
    codigo : string, null=False, blank=False
    --
    tipo_codigo: FOREIGN_KEY(T_TIPO_CODIGO_DEMANDA) : on_delete=PROTECT, null=False
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    --
    ** onCreate( {
        ** if tipo_codigo.datatype==INT:
            Validar(
                codigo.isdigit(),
                "El código debe ser un número"
            )
        ** if tipo_codigo.datatype==STRING:
            Validar(
                codigo.isalpha(),
                "El código debe ser una cadena de texto"
            )
    } )
}

entity T_LOCALIZACION_PERSONA {
    + COMPOSITE_KEY(T_LOCALIZACION, T_PERSONA)
    --
    principal : bool, default=false
    --
    localizacion: FOREIGN_KEY(T_LOCALIZACION) : on_delete=CASCADE, null=False
    persona: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        ** if principal:
            UNIQUE(localizacion, persona, principal=True)
            --> filter(principal=True).update(principal=False)
            --> Create new(localizacion, persona, principal=True)
    } )
    * onUpdate( {
        ** if principal:
            UNIQUE(localizacion, persona, principal=True)
            --> filter(principal=True).update(principal=False)
            --> Update (localizacion, persona, principal=True)
    } )
}

entity T_DEMANDA_ZONA {
    + COMPOSITE_KEY(T_ZONA, T_DEMANDA)
    --
    fecha_creacion: datetime, null=False, autogenerate
    fecha_recibido: datetime, null=True, blank=True, autogenerate
    esta_activo : bool, default=true
    recibido : bool, default=false
    comentarios : text, null=True, blank=True
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    enviado_por: FOREIGN_KEY(T_USER) : on_delete=PROTECT, autogenerate
    recibido_por: FOREIGN_KEY(T_USER) : on_delete=PROTECT, autogenerate
    zona: FOREIGN_KEY(T_ZONA) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        ** set ( esta_activo=True, recibido=False, demanda.asignado=True )
        for user in zona.users:
            ** enviar_mail( user.mail, "Asignacion de demanda", "Se le ha asignado una demanda" )
        demanda_zona_actual = filter(demanda=demanda, esta_activo=True)
        for demanda_zona in demanda_zona_actual:
            ** set ( demanda_zona.esta_activo=False )
            for user in demanda_zona.zona.users:
                ** enviar_mail( user.mail, "Desasignacion de demanda", "Se le ha desasignado una demanda" )
    } )
}

entity T_CALIFICACION_DEMANDA {
    + PRIMARY_KEY(id)
    --
    fecha_y_hora_creacion : datetime, null=False, autogenerate
    justificacion : text, null=False, blank=False
    estado_calificacion : (
        URGENTE,
        NO_URGENTE,
        COMPLETAR,
        NO PERTINENTE (SIPPDD),
        NO PERTINENTE (OTRAS PROVINCIAS),
        NO PERTINENTE (OFICIOS INCOMPLETOS),
        NO PERTINENTE (LEY 9944),
        PASA A LEGAJO
    ) : null=False, blank=False
    ultima_actualizacion : datetime, null=False, autogenerate
    --
    demanda: FOREIGN_KEY(T_DEMANDA on_delete=cascade null=False blank=False unique=True One-to-One)
    calificado_por_user: FOREIGN_KEY(T_USER) : on_delete=SET_NULL, null=False, blank=False
    --
    ** onCreate( {
        ** if estado_calificacion==PASA A LEGAJO:
            CrearLegajo( demanda.nnya )
            set ( demanda.estado_demanda=ADMITIDA )
        ** if estado_calificacion!=NO PERTINENTE:
            set ( demanda.estado_demanda=ARCHIVADA )
    } )

    ** onUpdate( {
        ** if estado_calificacion==PASA A LEGAJO:
            CrearLegajo( demanda.nnya )
            set ( demanda.estado_demanda=ADMITIDA )
        ** if estado_calificacion!=NO PERTINENTE:
            set ( demanda.estado_demanda=ARCHIVADA )
    } )
}

entity T_LOCALIZACION {
    + PRIMARY_KEY(id)
    --
    calle : string, null=False, blank=False
    tipo_calle : (
        CALLE,
        AVENIDA,
        PASAJE,
        RUTA,
        BOULEVARD,
        OTRO
    ) : null=True, blank=True
    piso_depto : int, null=True, blank=True
    lote : int, null=True, blank=True
    mza : int, null=True, blank=True
    casa_nro : int, null=False, blank=False
    referencia_geo : text, null=False, blank=False
    geolocalizacion : string, null=True, blank=True
    --
    barrio : FOREIGN_KEY(T_BARRIO) : on_delete=SET_NULL, null=True, blank=True
    localidad : FOREIGN_KEY(T_LOCALIDAD) : on_delete=CASCADE, null=False, blank=False
    cpc : FOREIGN_KEY(T_CPC) : on_delete=SET_NULL, null=True, blank=True
    --
    ValidarConAPI(
        calle,
        numero,
        barrio,
        localidad,
        provincia
        )
}

entity T_CONDICIONES_VULNERABILIDAD {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    descripcion : text, null=True, blank=True
    peso : int, null=False, blank=False

    nnya : bool, null=False, blank=False
    adulto : bool, null=False, blank=False
    --
    --
    * onCreate( {
        ** if nnya==False and adulto=False:
            raise ValidationError("Debe ser adulto o NNyA") 
    } )
    * onUpdate( {
        ** if nnya==False and adulto=False:
            raise ValidationError("Debe ser adulto o NNyA") 
    } )
}

entity T_PERSONA_CONDICIONES_VULNERABILIDAD {
    + COMPOSITE_KEY(T_NNyA, T_CONDICIONES_VULNERABILIDAD)
    --
    si_no : bool, null=False, blank=False
    -- 
    persona: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False
    condicion_vulnerabilidad: FOREIGN_KEY(T_CONDICIONES_VULNERABILIDAD) : on_delete=CASCADE, null=False
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=SET_NULL, null=True, blank=True
    --
    * onCreate( {
        ** if condicion_vulnerabilidad.nnya==True and persona.nnya==False:
            raise ValidationError("La persona debe ser un NNyA") 
        ** if condicion_vulnerabilidad.adulto==True and persona.adulto==False:
            raise ValidationError("La persona debe ser un adulto")
        ** sumar_restar_peso( persona, demanda, condicion_vulnerabilidad.peso )
    } )
    * onUpdate( {
        ** if condicion_vulnerabilidad.nnya==True and persona.nnya==False:
            raise ValidationError("La persona debe ser un NNyA") 
        ** if condicion_vulnerabilidad.adulto==True and persona.adulto==False:
            raise ValidationError("La persona debe ser un adulto")
        ** sumar_restar_peso( persona, demanda, condicion_vulnerabilidad.peso )
    } )
}

' entity T_MOTIVO_INTERVENCION {
'     + PRIMARY_KEY(id)
'     --
'     nombre : string, null=False
'     descripcion : text, null=True, blank=True
'     peso : int, null=False
'     --
' }

' entity T_DEMANDA_MOTIVO_INTERVENCION {
'     + COMPOSITE_KEY(T_NNyA, T_MOTIVO_INTERVENCION)
'     --
'     si_no : bool, null=False, blank=False
'     --
'     demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
'     motivo_intervencion: FOREIGN_KEY(T_MOTIVO_INTERVENCION) : on_delete=CASCADE, null=False
'     --
'     * onCreate( {
'         ** sumar_restar_peso( persona, demanda, motivo_intervencion.peso )
'     } )
'     * onUpdate( {
'         ** sumar_restar_peso( persona, demanda, motivo_intervencion.peso )
'     } )
' }


entity T_EDUCACION {
    nivel_alcanzado : (
        PRIMARIO,
        SECUNDARIO,
        TERCIARIO,
        UNIVERSITARIO,
        OTRO
    ) : null=False, blank=False
    esta_escolarizado : bool, null=False, blank=False
    ultimo_cursado : (
        PRIMERO,
        SEGUNDO,
        TERCERO,
        CUARTO,
        QUINTO,
        SEXTO,
        SEPTIMO,
        OCTAVO,
        NOVENO,
        PRIMERO_SECUNDARIO,
        SEGUNDO_SECUNDARIO,
        TERCERO_SECUNDARIO,
        CUARTO_SECUNDARIO,
        QUINTO_SECUNDARIO,
        OTRO
    ) : null=True, blank=True
    tipo_escuela : (
        PUBLICA,
        PRIVADA,
        ESTATAL,
        COMUN,
        ESPECIAL,
        OTRO
    ) : null=True, blank=True
    
    comentarios_educativos : text, null=True, blank=True
    --
    institucion_educativa: (
        FOREIGN_KEY(T_INSTITUCION_SANITARIA) : on_delete=CASCADE, null=False, blank=False
        ||
        string : null=False, blank=False
    )
    persona: FOREIGN_KEY(T_PERSONA) : OneToOneField, on_delete=CASCADE, null=False, blank=False
    --
    ** onCreate( {
        ** if institucion_educativa.DOES_NOT_EXIST:
            CREATE( T_INSTITUCION_SANITARIA with nombre=institucion_educativa )
    } )
}

entity T_PERSONA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    nombre_autopercibido : string, null=True, blank=True
    apellido : string, null=False, blank=False
    fecha_nacimiento : date, null=True, blank=True
    edad_aproximada : int, null=True, blank=True
    telefono : int, null=True, blank=True

    nacionalidad : (
        ARGENTINA,
        EXTRANJERA
    ) : null=False, blank=False

    dni : int, null=True, blank=True
    situacion_dni : (
        EN_TRAMITE,
        VENCIDO,
        EXTRAVIADO,
        INEXISTENTE,
        VALIDO,
        OTRO
    ) : null=False, blank=False
    genero : (
        MASCULINO,
        FEMENINO,
        NO BINARIO
    ) : null=False, blank=False

    observaciones : text, null=True, blank=True
    adulto : bool, null=False, blank=False
    nnya : bool, null=False, blank=False
    --
    --
    * onCreate( {
        ** if nnya==True:
            Create ( T_NNyA_SCORE with nnya=self )
        ** if nnya==False and adulto==False:
            raise ValidationError("Debe ser adulto o NNyA")
        ** if nnya==True and adulto==True:
            raise ValidationError("No puede ser adulto y NNyA a la vez")
        ** if situacion_dni==VALIDO and dni==None:
            raise ValidationError("El DNI no puede ser nulo si la situacion es valido")
        ** if situacion_dni!=VALIDO and dni!=None:
            raise ValidationError("El DNI debe ser nulo si la situacion no es valido")
        ** if boton_antipanico=True and nnya==True:
            raise ValidationError("No puede tener boton antipanico si es NNyA")
        ** if cautelar=True and nnya==True:
            raise ValidationError("No puede tener cautelar si es NNyA")
    } )
    ** onUpdate( {
        ** if nnya==False and adulto==False:
            raise ValidationError("Debe ser adulto o NNyA")
        ** if nnya==True and adulto==True:
            raise ValidationError("No puede ser adulto y NNyA a la vez")
        ** if situacion_dni==VALIDO and dni==None:
            raise ValidationError("El DNI no puede ser nulo si la situacion es valido")
        ** if situacion_dni!=VALIDO and dni!=None:
            raise ValidationError("El DNI debe ser nulo si la situacion no es valido")
        ** if boton_antipanico=True and nnya==True:
            raise ValidationError("No puede tener boton antipanico si es NNyA")
        ** if cautelar=True and nnya==True:
            raise ValidationError("No puede tener cautelar si es NNyA")
    } )
}

entity T_DEMANDA_PERSONA {
    + COMPOSITE_KEY(T_DEMANDA, T_PERSONA)
    --
    conviviente : bool, null=False, blank=False
    vinculo_demanda : (
        NNYA_PRINCIPAL,
        NNYA_SECUNDARIO,
        SUPUESTO_AUTOR_DV,
        SUPUESTO_AUTOR_DV_PRINCIPAL,
        GARANTIZA_PROTECCION,
        LEGALMENTE_RESPONSABLE,
        SE DESCONOCE,
    ) : null=False, blank=False, default="SE DESCONOCE"
    --
    vinculo_con_nnya_principal : FOREIGN_KEY(T_VINCULO_DE_PERSONAS) : on_delete=SET_NULL, null=True, blank=True
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    persona: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False
    --
    * onCreate || onUpdate( {
        UNIQUE(demanda, persona)
        ** if vinculo_demanda==NNYA_PRINCIPAL:
            UNIQUE(demanda, persona, vinculo_demanda=NNYA_PRINCIPAL)
            Validar(
                vinculo_con_nnya_principal!=NO_CORRESPONDE,
                "El nnya ingresante es un NNyA principal, no corresponde ingresar un vinculo con si mismo"
            )
        ** if vinculo_demanda==SUPUESTO_AUTOR_DV_PRINCIPAL:
            UNIQUE(demanda, persona, vinculo_demanda=SUPUESTO_AUTOR_DV_PRINCIPAL)
        ** if vinculo_demanda==NNYA_PRINCIPAL:
            UNIQUE(demanda, persona, vinculo_demanda=NNYA_PRINCIPAL)
        ** if (vinculo_demanda==NNYA_PRINCIPAL or vinculo_demanda==NNYA_SECUNDARIO) and persona.nnya==False:
            raise ValidationError("La persona seleccionada como nnya debe ser un NNyA")
        ** if (vinculo_demanda==SUPUESTO_AUTOR_DV or vinculo_demanda==SUPUESTO_AUTOR_DV_PRINCIPAL) and persona.nnya==True:
            raise ValidationError("La persona seleccionada como supuesto autor debe ser un adulto")
    } )
}

entity T_VINCULO_DE_PERSONAS {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    --
}

' entity T_VINCULO_PERSONA_PERSONA {
'     + COMPOSITE_KEY(T_PERSONA, T_PERSONA)
'     --
'     conviven : bool, null=False, blank=False
'     autordv : bool, null=False, blank=False
'     garantiza_proteccion : bool, null=False, blank=False
'     --
'     persona_1: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False, related_name=persona_1
'     persona_2: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False, related_name=persona_2
'     vinculo: FOREIGN_KEY(T_VINCULO_DE_PERSONAS) : on_delete=SET_NULL, null=True, blank=True
'     --
'     * onCreate( {
'         UNIQUE(persona_1, persona_2)
'         UNIQUE(persona_2, persona_1)
'         ** if garantiza_proteccion==True and autordv==True:
'             raise ValidationError("No puede garantizar proteccion y ser supuesto autor a la vez")
'         ** if garantiza_proteccion==True and (persona_1.nnya==True and persona_2.nnya==True):
'             raise ValidationError("Un nnya no puede garantizar proteccion a otro nnya")
'     } )
'     * onUpdate( {
'         UNIQUE(persona_1, persona_2)
'         UNIQUE(persona_2, persona_1)
'         ** if garantiza_proteccion==True and autordv==True:
'             raise ValidationError("No puede garantizar proteccion y ser supuesto autor a la vez")
'         ** if garantiza_proteccion==True and (persona_1.nnya==True and persona_2.nnya==True):
'             raise ValidationError("Un nnya no puede garantizar proteccion a otro nnya")
'     } )
' }

entity T_VULNERACION {
    + PRIMARY_KEY(id)
    --
    fecha_creacion : datetime, null=False, autogenerate
    ultima_modificacion : datetime, null=False, autogenerate

    principal_demanda : bool, default=false
    transcurre_actualidad : bool, default=false
    sumatoria_de_pesos : int, default=0
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=SET_NULL, null=True, blank=True
    nnya: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False, blank=False, related_name=vulneracion_nnya
    autor_dv: FOREIGN_KEY(T_PERSONA) : on_delete=SET_NULL, null=True, blank=True, related_name=vulneracion_autordv
    categoria_motivo: FOREIGN_KEY(T_CATEGORIA_MOTIVO) : on_delete=CASCADE, null=False
    categoria_submotivo: FOREIGN_KEY(T_CATEGORIA_SUBMOTIVO) : on_delete=CASCADE, null=False
    gravedad_vulneracion: FOREIGN_KEY(T_GRAVEDAD_VULNERACION) : on_delete=CASCADE, null=False
    urgencia_vulneracion: FOREIGN_KEY(T_URGENCIA_VULNERACION) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        ** if principal_demanda==True:
            UNIQUE(demanda, nnya, principal_demanda=True)
        ** sumar_restar_peso( demanda, nnya, categoria_motivo.peso )
        ** sumar_restar_peso( demanda, nnya, categoria_submotivo.peso )
        ** sumar_restar_peso( demanda, nnya, gravedad_vulneracion.peso )
        ** sumar_restar_peso( demanda, nnya, urgencia_vulneracion.peso )
        ** if nnya==autor_dv:
            raise ValidationError("El NNyA no puede ser el supuesto autor de la vulneracion")
    } )
    * onUpdate( {
        ** if principal_demanda==True:
            UNIQUE(demanda, nnya, principal_demanda=True)
        ** sumar_restar_peso( demanda, nnya, categoria_motivo.peso )
        ** sumar_restar_peso( demanda, nnya, categoria_submotivo.peso )
        ** sumar_restar_peso( demanda, nnya, gravedad_vulneracion.peso )
        ** sumar_restar_peso( demanda, nnya, urgencia_vulneracion.peso )
        ** if nnya==autor_dv:
            raise ValidationError("El NNyA no puede ser el supuesto autor de la vulneracion")
    } )
}

entity T_ACTIVIDAD {
    + PRIMARY_KEY(id)
    --
    fecha_y_hora : datetime, null=False, autogenerate
    fecha_y_hora_manual : datetime, null=False, blank=False
    descripcion : text, null=False, blank=False

    adjuntos : List<Blob>, null=True, blank=True // Admite documentos Word, PDF, imágenes
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    tipo: FOREIGN_KEY(T_ACTIVIDAD_TIPO) : on_delete=SET_NULL, null=True, blank=True
    institucion : (
        FOREIGN_KEY(T_INSTITUCION_ACTIVIDAD) : on_delete=CASCADE, null=False, blank=False
        ||
        string : null=False, blank=False
    )
    --
    ** onCreate( {
        ** if institucion.DOES_NOT_EXIST:
            CREATE( T_INSTITUCION_ACTIVIDAD with nombre=institucion )
    } )
}

entity T_ETIQUETA_RESPUESTA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_RESPUESTA {
    + PRIMARY_KEY(id)
    --
    fecha_y_hora : datetime, null=False, autogenerate
    sender : string, null=False, blank=False, default="Acme <onboarding@resend.dev>"
    cc : json, null=True, blank=True, default=[]
    bcc : json, null=True, blank=True, default=[]
    to : json, null=False, blank=False, default=[]
    asunto : string, null=False, blank=False
    mensaje : text, null=False, blank=False
    adjuntos : List<Blob>, null=True, blank=True // Admite documentos Word, PDF, imágenes
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    etiqueta: FOREIGN_KEY(T_ETIQUETA_RESPUESTA) : on_delete=SET_NULL, null=True, blank=True
    --
    * onCreate( {
        ** enviar_mail( mail, "Respuesta a demanda", mensaje )
    } )
}

entity T_DEMANDA_VINCULADA {
    + COMPOSITE_KEY(T_DEMANDA, T_DEMANDA)
    --
    --
    demanda_1: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    demanda_2: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        ** UNIQUE(demanda_1, demanda_2)
        ** UNIQUE(demanda_2, demanda_1)
    } )
}

entity T_DECISION {
    + PRIMARY_KEY(id)
    --
    fecha_y_hora : datetime, autogenerate
    justificacion : text, null=False, blank=False
    decision : (
        APERTURA_DE_LEGAJO,
       ! MPI_MPE, (si ya tiene legajo)
        RECHAZAR_CASO
    ) : null=False
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    nnya: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        ** if decision==APERTURA_DE_LEGAJO:
            CrearLegajo( nnya )
            set ( demanda.completado=True )
        ** if decision==MPI_MPE and nnya.legajo==None:
            raise ValidationError("El NNyA no tiene legajo")
        ** if decision==MPI_MPE and nnya.legajo!=None:
            set ( demanda.completado=True )
        ** if decision==RECHAZAR_CASO:
            set ( demanda.archivado=True )
        ** if demanda.archivado==True:
            raise ValidationError("No se puede modificar una decision")
        ** if nnya.persona.nnya == False:
            raise ValidationError("La persona debe ser un NNyA")
        
    } )
    * onUpdate( {
        raise ValidationError("No se puede modificar una decision")
    } )
}

entity T_INDICADORES_VALORACION {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    descripcion : text, null=True, blank=True
    peso : int, default=0
    --
}

entity T_EVALUACIONES {
    + PRIMARY_KEY(id)
    --
    si_no : bool, null=False, blank=False
    --
    demanda: FOREIGN_KEY(T_DEMANDA) : on_delete=CASCADE, null=False
    indicador: FOREIGN_KEY(T_INDICADORES_VALORACION) : on_delete=CASCADE, null=False
    --
    * onCreate( {
        UNIQUE(demanda, indicador)
        ** sumar_restar_peso( demanda, demanda.nnya, indicador.peso )
    } )
    * onUpdate( {
        UNIQUE(demanda, indicador)
        ** sumar_restar_peso( demanda, demanda.nnya, indicador.peso )
    } )
}

entity T_LEGAJO {
    + PRIMARY_KEY(id)
    --
    info_legajo : text, null=False, blank=False
    --
    nnya: FOREIGN_KEY(T_PERSONA) : OneToOneField, on_delete=CASCADE, null=False, blank=False
    --
}

entity T_LEGAJO_ASIGNADO {
    + COMPOSITE_KEY(T_USER, T_LEGAJO)
    --
    esta_activo : bool, default=true
    recibido : bool, default=false
    comentarios : text, null=True, blank=True
    --
    legajo: FOREIGN_KEY(T_LEGAJO) : on_delete=CASCADE, null=False
    user: FOREIGN_KEY(T_USER) : on_delete=CASCADE, null=False
    --
    AsignarUser(
        user.esta_activo
        )
}

entity T_ZONA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
}

class AbstractBaseUser {
    + password : Charfield
    + last_login : blank=True, null=True
    + is_active : default=True
    
    --
    __str__()
    + save()
    + get_username()
    + clean()
    + natural_key()
    + set_password( make_password() )
    + check_password()
    + acheck_password
    + set_unusable_password()
    + has_usable_password()
    + get_session_auth_hash()
    + get_session_auth_fallback_hash()
    + _get_session_auth_hash()
    --
    @property : is_anonymous()
    @property : is_authenticated()
    --
    @classmethod : get_email_field_name()
    @classmethod : normalize_username()
}

class PermissionsMixin {
    + is_superuser
    + groups : ManyToManyField(Group)
    + user_permissions : ManyToManyField(Permission)

    --
    get_user_permissions()
    get_group_permissions()
    get_all_permissions()
    has_perm()
    has_perms()
    has_module_perms()
    --
}

class AbstractUser {
    + username : unique, null=True
    + first_name : blank=True
    + last_name : blank=True
    + email : unique, blank=True
    + is_staff : default=False
    + date_joined : default=timezone.now
    - EMAIL_FIELD : "email"
    - USERNAME_FIELD : "username"
    - REQUIRED_FIELDS : ["email"]

    --
    + clean() : normalize_email(self.email)
    + get_full_name()
    + get_short_name()
    + email_user()
    --
}

class CustomUser {
    + fecha_nacimiento : null=True, blank=True
    + genero : (
        MASCULINO,
        FEMENINO,
        NO BINARIO
    )
    + telefono : null=True, blank=True

    --
    + localidad : FOREIGN_KEY(T_LOCALIDAD) : on_delete=SET_NULL, null=True, blank=True
    --
}

AbstractBaseUser <|-- AbstractUser
PermissionsMixin <|-- AbstractUser
AbstractUser <|-- CustomUser


entity T_USER {
    + PRIMARY_KEY(id)
    + password
    + last_login : blank=True, null=True
    + username : unique, null=True
    + first_name : blank=True
    + last_name : blank=True
    + email : unique, blank=True
    + is_staff : default=False
    + is_active : default=True
    + date_joined : default=timezone.now
    + is_superuser : default=False
    + fecha_nacimiento : null=True, blank
    + genero : (
        MASCULINO,
        FEMENINO,
        NO BINARIO
    )
    + telefono : null=True, blank
    --
    + localidad : FOREIGN_KEY(T_LOCALIDAD) : on_delete=SET_NULL, null=True, blank=True
    --
}

entity T_USER_ZONA {
    + COMPOSITE_KEY(T_USER, T_ZONA)
    --
    jefe : bool, default=false
    --
    user: FOREIGN_KEY(T_USER) : on_delete=CASCADE, null=False
    zona: FOREIGN_KEY(T_ZONA) : on_delete=CASCADE, null=False
    --
}

CustomUser <|-- T_USER

entity T_DERECHO_AFECTADO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_CATEGORIA_MOTIVO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    descripcion : text, null=True, blank=True
    peso : int, null=False, blank=False
    --
    derecho_afectado : FOREIGN_KEY(T_DERECHO_AFECTADO) : on_delete=CASCADE, null=False
    --
}

entity T_CATEGORIA_SUBMOTIVO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    descripcion : text, null=True, blank=True
    peso : int, null=False, blank=False
    --
    motivo : FOREIGN_KEY(T_CATEGORIA_MOTIVO) : on_delete=CASCADE, null=False
    --
}

entity T_URGENCIA_VULNERACION {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False
    descripcion : text, null=False
    peso : int, null=False, blank=False
    --
}

entity T_GRAVEDAD_VULNERACION {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False
    descripcion : text, null=False
    peso : int, null=False, blank=False
    --
}

entity T_BARRIO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    localidad : FOREIGN_KEY(T_LOCALIDAD) : on_delete=CASCADE, null=False
}

entity T_CPC {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    localidad : FOREIGN_KEY(T_LOCALIDAD) : on_delete=CASCADE, null=False
}

' entity T_DEPARTAMENTO {
'     + PRIMARY_KEY(id)
'     --
'     nombre : string, null=False, blank=False
'     --
'     provincia : FOREIGN_KEY(T_PROVINCIA) : on_delete=CASCADE, null=False
'     --
' }

entity T_LOCALIDAD {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    ' departamento : FOREIGN_KEY(T_DEPARTAMENTO) : on_delete=CASCADE, null=False
}

' entity T_PROVINCIA {
'     + PRIMARY_KEY(id)
'     --
'     nombre : string, null=False, blank=False
'     --
' }


entity T_INSTITUCION_ACTIVIDAD {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    ' mail : mail, null=True, blank=True
    ' telefono : int, null=True, blank=True
    --
}

entity T_INSTITUCION_EDUCATIVA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    ' mail : mail, null=True, blank=True
    ' telefono : int, null=True, blank=True
    --
}

entity T_INSTITUCION_SANITARIA {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}

entity T_MEDICO {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    mail : mail, null=True, blank=True
    telefono : int, null=True, blank=True
}

entity T_COBERTURA_MEDICA {
    + PRIMARY_KEY(id)
    --
    obra_social : (
        NO_POSEE,
        PAMI,
        IOMA,
        OSECAC,
        OSDE,
        OTRA
    )
    auh : bool, null=False, blank=False
    intervencion : (
        AUH,
        OBRA_SOCIAL,
        AMBAS,
        NINGUNA
    )
    observaciones : text, null=True, blank=True

    --
    institucion_sanitaria: (
        FOREIGN_KEY(T_INSTITUCION_SANITARIA) : on_delete=CASCADE, null=False, blank=False
        ||
        string : null=False, blank=False
    )
    persona: FOREIGN_KEY(T_PERSONA) : OneToOneField, on_delete=CASCADE, null=False, blank=False
    medico_cabecera: FOREIGN_KEY(T_MEDICO) : on_delete=SET_NULL, null=True, blank=True
    --

    ** onCreate( {
        ** if institucion_sanitaria.DOES_NOT_EXIST:
            CREATE( T_INSTITUCION_SANITARIA with nombre=institucion_sanitaria )
    } )
}


entity T_SITUACION_SALUD {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
}


entity T_ENFERMEDAD {
    + PRIMARY_KEY(id)
    --
    nombre : string, null=False, blank=False
    --
    situacion_salud_categoria: FOREIGN_KEY(T_SITUACION_SALUD) : on_delete=CASCADE, null=False
}


entity T_PERSONA_ENFERMEDADES {
    + PRIMARY_KEY(id)
    --
    recibe_tratamiento : bool, null=False, blank=False
    informacion_tratamiento : text, null=True, blank=True
    certificacion : (
        TIENE,
        NO_TIENE,
        EN_TRAMITE,
        SE_INTERVIENE_EN_SU_GESTION,
        EN_PERIODO_DE_EVALUACION
    )
    beneficios_gestionados : (
        BOLETO_DE_COLECTIVO,
        PROTESIS,
        PENSION,
    ) : null=True, blank=True

    oficios_adjuntos : List<Blob>, null=True, blank=True // Admite documentos PDF, imágenes, etc.
    certificacion : List<Blob>, null=True, blank=True // Admite documentos PDF, imágenes, etc.

    --
    persona: FOREIGN_KEY(T_PERSONA) : on_delete=CASCADE, null=False
    situacion_salud: FOREIGN_KEY(T_SITUACION_SALUD) : on_delete=CASCADE, null=False
    enfermedad: FOREIGN_KEY(T_ENFERMEDAD) : on_delete=CASCADE, null=False
    institucion_sanitaria_interviniente : FOREIGN_KEY(T_INSTITUCION_SANITARIA) : on_delete=SET_NULL, null=True, blank=True, placeholder="Instituciones de tratamiento con internación de salud mental público o privado (como Neuro, Casa del Joven, Morra, Granjas para jóvenes con adicciones). Instituciones de salud público o privados (ejemplo hospital de urgencias, hospital de clínicas, hospital Ferreyra)"
    medico_tratamiento: FOREIGN_KEY(T_MEDICO) : on_delete=SET_NULL, null=True, blank=True
    --

    ** onCreate( {
        ** if institucion_sanitaria.DOES_NOT_EXIST:
            CREATE( T_INSTITUCION_SANITARIA with nombre=institucion_sanitaria )
        ** if medico_tratamiento.DOES_NOT_EXIST:
            CREATE( T_MEDICO with nombre=medico_tratamiento )
        ** if enfermedad.DOES_NOT_EXIST:
            CREATE( T_ENFERMEDAD with nombre=enfermedad )
    } )
}

entity T_NNyA_SCORE {
    + PRIMARY_KEY(id)
    --
    ultima_actualizacion : datetime, null=False, autogenerate
    score : float, null=False
    score_condiciones_vulnerabilidad : float, null=False
    score_vulneracion : float, null=False
    --
    nnya: FOREIGN_KEY(T_PERSONA) : OneToOneField, on_delete=CASCADE, null=False, blank=False
    --
}

entity T_ACTIVIDAD_TIPO {
    + PRIMARY_KEY(id)
    --
    modelo : Blob, null=True, blank=True
    nombre : string, null=False, blank=False
    --
}

T_DEMANDA_ASIGNADO "*" -- "1" T_USER
T_DEMANDA "1" -- "*" T_DEMANDA_ASIGNADO
T_DEMANDA "1" -- "1" T_PRECALIFICACION_DEMANDA

T_DEMANDA "1" -- "1" T_INFORME_101

T_DEMANDA "*" -- "1" T_LOCALIZACION
T_LOCALIZACION "*" -- "1" T_BARRIO
T_LOCALIZACION "*" -- "1" T_LOCALIDAD
T_LOCALIZACION "*" -- "1" T_CPC
T_LOCALIDAD "*" -- "1" T_PROVINCIA
T_LOCALIDAD "*" -- "1" T_DEPARTAMENTO

T_LOCALIZACION "1" -- "*" T_INSTITUCION_ACTIVIDAD
T_LOCALIZACION "1" -- "*" T_INSTITUCION_EDUCATIVA
T_LOCALIZACION "1" -- "*" T_INSTITUCION_SANITARIA

T_LOCALIZACION "1" -- "*" T_LOCALIZACION_PERSONA
T_PERSONA "1" -- "*" T_LOCALIZACION_PERSONA

T_PERSONA "1" -- "1" T_NNyA_EDUCACION
T_NNyA_EDUCACION "*" -- "1" T_INSTITUCION_EDUCATIVA
T_PERSONA "1" -- "1" T_NNyA_SALUD
T_NNyA_SALUD "*" -- "1" T_INSTITUCION_SANITARIA
T_PERSONA "1" -- "*" T_PERSONA_CONDICIONES_VULNERABILIDAD
T_PERSONA_CONDICIONES_VULNERABILIDAD "*" -- "1" T_CONDICIONES_VULNERABILIDAD
T_DEMANDA "1" -- "*" T_DEMANDA_MOTIVO_INTERVENCION
T_DEMANDA_MOTIVO_INTERVENCION "*" -- "1" T_MOTIVO_INTERVENCION

T_DEMANDA_SCORE "1" -- "1" T_DEMANDA
T_NNyA_SCORE "1" -- "1" T_PERSONA

T_DEMANDA_PERSONA "*" -- "1" T_DEMANDA
T_PERSONA "1" -- "*" T_DEMANDA_PERSONA

T_VINCULO_PERSONA_PERSONA "*" -- "1" T_PERSONA
T_VINCULO_DE_PERSONAS "1" -- "*" T_VINCULO_PERSONA_PERSONA


T_DEMANDA "1" -- "*" T_VULNERACION
T_CATEGORIA_MOTIVO "1" -- "*" T_CATEGORIA_SUBMOTIVO
T_CATEGORIA_MOTIVO "1" -- "*" T_VULNERACION
T_CATEGORIA_SUBMOTIVO "1" -- "*" T_VULNERACION

T_VULNERACION "*" -- "1" T_GRAVEDAD_VULNERACION
T_VULNERACION "*" -- "1" T_URGENCIA_VULNERACION

T_PERSONA "1" -- "*" T_VULNERACION
T_PERSONA "1" -- "*" T_VULNERACION

T_ACTIVIDAD "*" -- "1" T_DEMANDA
T_ACTIVIDAD "*" -- "1" T_ACTIVIDAD_TIPO
T_ACTIVIDAD "*" -- "1" T_INSTITUCION_ACTIVIDAD

T_RESPUESTA "*" -- "1" T_DEMANDA

T_DEMANDA_VINCULADA "*" -- "1" T_DEMANDA
T_DEMANDA_VINCULADA "*" -- "1" T_DEMANDA

T_DECISION "*" -- "1" T_PERSONA
T_DECISION "*" -- "1" T_DEMANDA
T_DEMANDA "1" -- "*" T_EVALUACIONES
T_EVALUACIONES "*" -- "1" T_INDICADORES_VALORACION

T_LEGAJO "1" -- "1" T_PERSONA

T_LEGAJO_ASIGNADO "*" -- "1" T_USER
T_LEGAJO "1" -- "*" T_LEGAJO_ASIGNADO

@enduml

' DemandasVinculadas : Conexiones de la demanda : caso1=fkDemanda, caso2=fkDemanda
' caratula : identificar legajo o expediente
' la caratula identifica el NNyA al que se le genera la demanda
' el legajo deberia estar relacionado con la caratula, ¿ osea el NNyA principal ?
